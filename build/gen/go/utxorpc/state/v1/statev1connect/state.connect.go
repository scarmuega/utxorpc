/// A consistent view of the state of the ledger

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/state/v1/state.proto

package statev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/utxorpc/state/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LedgerStateServiceName is the fully-qualified name of the LedgerStateService service.
	LedgerStateServiceName = "utxorpc.state.v1.LedgerStateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LedgerStateServiceGetChainTipProcedure is the fully-qualified name of the LedgerStateService's
	// GetChainTip RPC.
	LedgerStateServiceGetChainTipProcedure = "/utxorpc.state.v1.LedgerStateService/GetChainTip"
	// LedgerStateServiceGetChainParamProcedure is the fully-qualified name of the LedgerStateService's
	// GetChainParam RPC.
	LedgerStateServiceGetChainParamProcedure = "/utxorpc.state.v1.LedgerStateService/GetChainParam"
	// LedgerStateServiceGetUtxoByAddressProcedure is the fully-qualified name of the
	// LedgerStateService's GetUtxoByAddress RPC.
	LedgerStateServiceGetUtxoByAddressProcedure = "/utxorpc.state.v1.LedgerStateService/GetUtxoByAddress"
	// LedgerStateServiceGetUtxoByRefProcedure is the fully-qualified name of the LedgerStateService's
	// GetUtxoByRef RPC.
	LedgerStateServiceGetUtxoByRefProcedure = "/utxorpc.state.v1.LedgerStateService/GetUtxoByRef"
	// LedgerStateServiceHoldUtxoProcedure is the fully-qualified name of the LedgerStateService's
	// HoldUtxo RPC.
	LedgerStateServiceHoldUtxoProcedure = "/utxorpc.state.v1.LedgerStateService/HoldUtxo"
)

// LedgerStateServiceClient is a client for the utxorpc.state.v1.LedgerStateService service.
type LedgerStateServiceClient interface {
	GetChainTip(context.Context, *connect_go.Request[v1.GetChainTipRequest]) (*connect_go.Response[v1.GetChainTipResponse], error)
	GetChainParam(context.Context, *connect_go.Request[v1.GetChainParamRequest]) (*connect_go.Response[v1.GetChainParamResponse], error)
	GetUtxoByAddress(context.Context, *connect_go.Request[v1.GetUtxoByAddressRequest]) (*connect_go.Response[v1.GetUtxoByAddressResponse], error)
	GetUtxoByRef(context.Context, *connect_go.Request[v1.GetUtxoByRefRequest]) (*connect_go.Response[v1.GetUtxoByRefResponse], error)
	HoldUtxo(context.Context, *connect_go.Request[v1.HoldUtxoRequest]) (*connect_go.ServerStreamForClient[v1.HoldUtxoResponse], error)
}

// NewLedgerStateServiceClient constructs a client for the utxorpc.state.v1.LedgerStateService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLedgerStateServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LedgerStateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ledgerStateServiceClient{
		getChainTip: connect_go.NewClient[v1.GetChainTipRequest, v1.GetChainTipResponse](
			httpClient,
			baseURL+LedgerStateServiceGetChainTipProcedure,
			opts...,
		),
		getChainParam: connect_go.NewClient[v1.GetChainParamRequest, v1.GetChainParamResponse](
			httpClient,
			baseURL+LedgerStateServiceGetChainParamProcedure,
			opts...,
		),
		getUtxoByAddress: connect_go.NewClient[v1.GetUtxoByAddressRequest, v1.GetUtxoByAddressResponse](
			httpClient,
			baseURL+LedgerStateServiceGetUtxoByAddressProcedure,
			opts...,
		),
		getUtxoByRef: connect_go.NewClient[v1.GetUtxoByRefRequest, v1.GetUtxoByRefResponse](
			httpClient,
			baseURL+LedgerStateServiceGetUtxoByRefProcedure,
			opts...,
		),
		holdUtxo: connect_go.NewClient[v1.HoldUtxoRequest, v1.HoldUtxoResponse](
			httpClient,
			baseURL+LedgerStateServiceHoldUtxoProcedure,
			opts...,
		),
	}
}

// ledgerStateServiceClient implements LedgerStateServiceClient.
type ledgerStateServiceClient struct {
	getChainTip      *connect_go.Client[v1.GetChainTipRequest, v1.GetChainTipResponse]
	getChainParam    *connect_go.Client[v1.GetChainParamRequest, v1.GetChainParamResponse]
	getUtxoByAddress *connect_go.Client[v1.GetUtxoByAddressRequest, v1.GetUtxoByAddressResponse]
	getUtxoByRef     *connect_go.Client[v1.GetUtxoByRefRequest, v1.GetUtxoByRefResponse]
	holdUtxo         *connect_go.Client[v1.HoldUtxoRequest, v1.HoldUtxoResponse]
}

// GetChainTip calls utxorpc.state.v1.LedgerStateService.GetChainTip.
func (c *ledgerStateServiceClient) GetChainTip(ctx context.Context, req *connect_go.Request[v1.GetChainTipRequest]) (*connect_go.Response[v1.GetChainTipResponse], error) {
	return c.getChainTip.CallUnary(ctx, req)
}

// GetChainParam calls utxorpc.state.v1.LedgerStateService.GetChainParam.
func (c *ledgerStateServiceClient) GetChainParam(ctx context.Context, req *connect_go.Request[v1.GetChainParamRequest]) (*connect_go.Response[v1.GetChainParamResponse], error) {
	return c.getChainParam.CallUnary(ctx, req)
}

// GetUtxoByAddress calls utxorpc.state.v1.LedgerStateService.GetUtxoByAddress.
func (c *ledgerStateServiceClient) GetUtxoByAddress(ctx context.Context, req *connect_go.Request[v1.GetUtxoByAddressRequest]) (*connect_go.Response[v1.GetUtxoByAddressResponse], error) {
	return c.getUtxoByAddress.CallUnary(ctx, req)
}

// GetUtxoByRef calls utxorpc.state.v1.LedgerStateService.GetUtxoByRef.
func (c *ledgerStateServiceClient) GetUtxoByRef(ctx context.Context, req *connect_go.Request[v1.GetUtxoByRefRequest]) (*connect_go.Response[v1.GetUtxoByRefResponse], error) {
	return c.getUtxoByRef.CallUnary(ctx, req)
}

// HoldUtxo calls utxorpc.state.v1.LedgerStateService.HoldUtxo.
func (c *ledgerStateServiceClient) HoldUtxo(ctx context.Context, req *connect_go.Request[v1.HoldUtxoRequest]) (*connect_go.ServerStreamForClient[v1.HoldUtxoResponse], error) {
	return c.holdUtxo.CallServerStream(ctx, req)
}

// LedgerStateServiceHandler is an implementation of the utxorpc.state.v1.LedgerStateService
// service.
type LedgerStateServiceHandler interface {
	GetChainTip(context.Context, *connect_go.Request[v1.GetChainTipRequest]) (*connect_go.Response[v1.GetChainTipResponse], error)
	GetChainParam(context.Context, *connect_go.Request[v1.GetChainParamRequest]) (*connect_go.Response[v1.GetChainParamResponse], error)
	GetUtxoByAddress(context.Context, *connect_go.Request[v1.GetUtxoByAddressRequest]) (*connect_go.Response[v1.GetUtxoByAddressResponse], error)
	GetUtxoByRef(context.Context, *connect_go.Request[v1.GetUtxoByRefRequest]) (*connect_go.Response[v1.GetUtxoByRefResponse], error)
	HoldUtxo(context.Context, *connect_go.Request[v1.HoldUtxoRequest], *connect_go.ServerStream[v1.HoldUtxoResponse]) error
}

// NewLedgerStateServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLedgerStateServiceHandler(svc LedgerStateServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(LedgerStateServiceGetChainTipProcedure, connect_go.NewUnaryHandler(
		LedgerStateServiceGetChainTipProcedure,
		svc.GetChainTip,
		opts...,
	))
	mux.Handle(LedgerStateServiceGetChainParamProcedure, connect_go.NewUnaryHandler(
		LedgerStateServiceGetChainParamProcedure,
		svc.GetChainParam,
		opts...,
	))
	mux.Handle(LedgerStateServiceGetUtxoByAddressProcedure, connect_go.NewUnaryHandler(
		LedgerStateServiceGetUtxoByAddressProcedure,
		svc.GetUtxoByAddress,
		opts...,
	))
	mux.Handle(LedgerStateServiceGetUtxoByRefProcedure, connect_go.NewUnaryHandler(
		LedgerStateServiceGetUtxoByRefProcedure,
		svc.GetUtxoByRef,
		opts...,
	))
	mux.Handle(LedgerStateServiceHoldUtxoProcedure, connect_go.NewServerStreamHandler(
		LedgerStateServiceHoldUtxoProcedure,
		svc.HoldUtxo,
		opts...,
	))
	return "/utxorpc.state.v1.LedgerStateService/", mux
}

// UnimplementedLedgerStateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLedgerStateServiceHandler struct{}

func (UnimplementedLedgerStateServiceHandler) GetChainTip(context.Context, *connect_go.Request[v1.GetChainTipRequest]) (*connect_go.Response[v1.GetChainTipResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.state.v1.LedgerStateService.GetChainTip is not implemented"))
}

func (UnimplementedLedgerStateServiceHandler) GetChainParam(context.Context, *connect_go.Request[v1.GetChainParamRequest]) (*connect_go.Response[v1.GetChainParamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.state.v1.LedgerStateService.GetChainParam is not implemented"))
}

func (UnimplementedLedgerStateServiceHandler) GetUtxoByAddress(context.Context, *connect_go.Request[v1.GetUtxoByAddressRequest]) (*connect_go.Response[v1.GetUtxoByAddressResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.state.v1.LedgerStateService.GetUtxoByAddress is not implemented"))
}

func (UnimplementedLedgerStateServiceHandler) GetUtxoByRef(context.Context, *connect_go.Request[v1.GetUtxoByRefRequest]) (*connect_go.Response[v1.GetUtxoByRefResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.state.v1.LedgerStateService.GetUtxoByRef is not implemented"))
}

func (UnimplementedLedgerStateServiceHandler) HoldUtxo(context.Context, *connect_go.Request[v1.HoldUtxoRequest], *connect_go.ServerStream[v1.HoldUtxoResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.state.v1.LedgerStateService.HoldUtxo is not implemented"))
}
