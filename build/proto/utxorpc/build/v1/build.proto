/// A consistent view of the state of the ledger

syntax = "proto3";

package utxorpc.state.v1;

import "google/protobuf/field_mask.proto";
import "utxorpc/cardano/v1/cardano.proto";

// Represents a specific point in the blockchain.
message ChainPoint {
  uint64 slot = 1; // Slot number.
  uint64 height = 2; // Block height.
  bytes hash = 3; // Block hash.
}

// Request to get the current chain tip.
message GetChainTipRequest {}

// Response containing the current chain tip.
message GetChainTipResponse {
  ChainPoint tip = 1; // Current chain tip.
}

// Request to get specific chain parameters.
message GetChainParamRequest {
  repeated string param = 1; // List of requested parameters.
}

// Represents a key-value pair for a chain parameter.
message ChainParam {
  string key = 1; // Parameter key.
  bytes value = 2; // Parameter value.
}

// Response containing the requested chain parameters.
message GetChainParamResponse {
  repeated ChainParam param = 1; // List of requested chain parameters.
}

// Request to get UTxOs by their associated addresses.
message GetUtxoByAddressRequest {
  repeated bytes address = 1; // List of addresses to query.
  ChainPoint acquire_point = 2; // Point in the chain to query from.
}

// An evenlope that holds an UTxO from any of compatible chains
message AnyChainUtxo {
  oneof chain {
    utxorpc.cardano.v1.TxOutput cardano = 1;
  }
}

// Response containing the UTxOs associated with the requested addresses.
message GetUtxoByAddressResponse {
  repeated AnyChainUtxo items = 1; // List of UTxOs.
  string next_token = 2; // Token for pagination.
}

// Represents a reference to a UTxO.
message UtxoRef {
  bytes hash = 1; // Transaction hash.
  uint32 index = 2; // Output index.
}

// Request to get UTxOs by their references.
message GetUtxoByRefRequest {
  repeated UtxoRef ref = 1; // List of UTxO references to query.
  ChainPoint acquire_point = 2; // Point in the chain to query from.
}

// Response containing the UTxOs associated with the requested references.
message GetUtxoByRefResponse {
  repeated AnyChainUtxo items = 1; // List of UTxOs.
  string next_token = 2; // Token for pagination.
}

// Request to hold UTxOs.
message HoldUtxoRequest {
  repeated UtxoRef refs = 1; // List of UTxO references to hold.
}

// Response containing information about lost UTxOs.
message HoldUtxoResponse {
  repeated UtxoRef lost = 1; // List of lost UTxO references.
}

// Service definition for querying the state of the ledger.
service LedgerStateService {
  rpc GetChainTip(GetChainTipRequest) returns (GetChainTipResponse); // Get the current chain tip.
  rpc GetChainParam(GetChainParamRequest) returns (GetChainParamResponse); // Get specific chain parameters.
  rpc GetUtxoByAddress(GetUtxoByAddressRequest) returns (GetUtxoByAddressResponse); // Get UTxOs by their associated addresses.
  rpc GetUtxoByRef(GetUtxoByRefRequest) returns (GetUtxoByRefResponse); // Get UTxOs by their references.
  rpc HoldUtxo(HoldUtxoRequest) returns (stream HoldUtxoResponse); // Hold UTxOs and receive updates about lost UTxOs
}
