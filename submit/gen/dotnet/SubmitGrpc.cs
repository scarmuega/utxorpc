// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: utxorpc/submit/v1/submit.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Utxorpc.Submit.V1 {
  /// <summary>
  /// Service definition for submitting transactions and checking their status.
  /// </summary>
  public static partial class SubmitService
  {
    static readonly string __ServiceName = "utxorpc.submit.v1.SubmitService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.SubmitTxRequest> __Marshaller_utxorpc_submit_v1_SubmitTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.SubmitTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.SubmitTxResponse> __Marshaller_utxorpc_submit_v1_SubmitTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.SubmitTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.WaitForTxRequest> __Marshaller_utxorpc_submit_v1_WaitForTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.WaitForTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.WaitForTxResponse> __Marshaller_utxorpc_submit_v1_WaitForTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.WaitForTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.ReadMempoolRequest> __Marshaller_utxorpc_submit_v1_ReadMempoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.ReadMempoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.ReadMempoolResponse> __Marshaller_utxorpc_submit_v1_ReadMempoolResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.ReadMempoolResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.WatchMempoolRequest> __Marshaller_utxorpc_submit_v1_WatchMempoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.WatchMempoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Utxorpc.Submit.V1.WatchMempoolResponse> __Marshaller_utxorpc_submit_v1_WatchMempoolResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Utxorpc.Submit.V1.WatchMempoolResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Utxorpc.Submit.V1.SubmitTxRequest, global::Utxorpc.Submit.V1.SubmitTxResponse> __Method_SubmitTx = new grpc::Method<global::Utxorpc.Submit.V1.SubmitTxRequest, global::Utxorpc.Submit.V1.SubmitTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitTx",
        __Marshaller_utxorpc_submit_v1_SubmitTxRequest,
        __Marshaller_utxorpc_submit_v1_SubmitTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Utxorpc.Submit.V1.WaitForTxRequest, global::Utxorpc.Submit.V1.WaitForTxResponse> __Method_WaitForTx = new grpc::Method<global::Utxorpc.Submit.V1.WaitForTxRequest, global::Utxorpc.Submit.V1.WaitForTxResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WaitForTx",
        __Marshaller_utxorpc_submit_v1_WaitForTxRequest,
        __Marshaller_utxorpc_submit_v1_WaitForTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Utxorpc.Submit.V1.ReadMempoolRequest, global::Utxorpc.Submit.V1.ReadMempoolResponse> __Method_ReadMempool = new grpc::Method<global::Utxorpc.Submit.V1.ReadMempoolRequest, global::Utxorpc.Submit.V1.ReadMempoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadMempool",
        __Marshaller_utxorpc_submit_v1_ReadMempoolRequest,
        __Marshaller_utxorpc_submit_v1_ReadMempoolResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Utxorpc.Submit.V1.WatchMempoolRequest, global::Utxorpc.Submit.V1.WatchMempoolResponse> __Method_WatchMempool = new grpc::Method<global::Utxorpc.Submit.V1.WatchMempoolRequest, global::Utxorpc.Submit.V1.WatchMempoolResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchMempool",
        __Marshaller_utxorpc_submit_v1_WatchMempoolRequest,
        __Marshaller_utxorpc_submit_v1_WatchMempoolResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Utxorpc.Submit.V1.SubmitReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SubmitService</summary>
    [grpc::BindServiceMethod(typeof(SubmitService), "BindService")]
    public abstract partial class SubmitServiceBase
    {
      /// <summary>
      /// Submit transactions to the blockchain.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Utxorpc.Submit.V1.SubmitTxResponse> SubmitTx(global::Utxorpc.Submit.V1.SubmitTxRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Wait for transactions to reach a certain stage and stream the updates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task WaitForTx(global::Utxorpc.Submit.V1.WaitForTxRequest request, grpc::IServerStreamWriter<global::Utxorpc.Submit.V1.WaitForTxResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a point-in-time snapshot of the mempool.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Utxorpc.Submit.V1.ReadMempoolResponse> ReadMempool(global::Utxorpc.Submit.V1.ReadMempoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream transactions from the mempool matching the specified predicates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task WatchMempool(global::Utxorpc.Submit.V1.WatchMempoolRequest request, grpc::IServerStreamWriter<global::Utxorpc.Submit.V1.WatchMempoolResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SubmitService</summary>
    public partial class SubmitServiceClient : grpc::ClientBase<SubmitServiceClient>
    {
      /// <summary>Creates a new client for SubmitService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SubmitServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SubmitService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SubmitServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SubmitServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SubmitServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Submit transactions to the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Utxorpc.Submit.V1.SubmitTxResponse SubmitTx(global::Utxorpc.Submit.V1.SubmitTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Submit transactions to the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Utxorpc.Submit.V1.SubmitTxResponse SubmitTx(global::Utxorpc.Submit.V1.SubmitTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitTx, null, options, request);
      }
      /// <summary>
      /// Submit transactions to the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Utxorpc.Submit.V1.SubmitTxResponse> SubmitTxAsync(global::Utxorpc.Submit.V1.SubmitTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Submit transactions to the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Utxorpc.Submit.V1.SubmitTxResponse> SubmitTxAsync(global::Utxorpc.Submit.V1.SubmitTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitTx, null, options, request);
      }
      /// <summary>
      /// Wait for transactions to reach a certain stage and stream the updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Utxorpc.Submit.V1.WaitForTxResponse> WaitForTx(global::Utxorpc.Submit.V1.WaitForTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitForTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Wait for transactions to reach a certain stage and stream the updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Utxorpc.Submit.V1.WaitForTxResponse> WaitForTx(global::Utxorpc.Submit.V1.WaitForTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WaitForTx, null, options, request);
      }
      /// <summary>
      /// Returns a point-in-time snapshot of the mempool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Utxorpc.Submit.V1.ReadMempoolResponse ReadMempool(global::Utxorpc.Submit.V1.ReadMempoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadMempool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a point-in-time snapshot of the mempool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Utxorpc.Submit.V1.ReadMempoolResponse ReadMempool(global::Utxorpc.Submit.V1.ReadMempoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadMempool, null, options, request);
      }
      /// <summary>
      /// Returns a point-in-time snapshot of the mempool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Utxorpc.Submit.V1.ReadMempoolResponse> ReadMempoolAsync(global::Utxorpc.Submit.V1.ReadMempoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadMempoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a point-in-time snapshot of the mempool.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Utxorpc.Submit.V1.ReadMempoolResponse> ReadMempoolAsync(global::Utxorpc.Submit.V1.ReadMempoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadMempool, null, options, request);
      }
      /// <summary>
      /// Stream transactions from the mempool matching the specified predicates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Utxorpc.Submit.V1.WatchMempoolResponse> WatchMempool(global::Utxorpc.Submit.V1.WatchMempoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchMempool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream transactions from the mempool matching the specified predicates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Utxorpc.Submit.V1.WatchMempoolResponse> WatchMempool(global::Utxorpc.Submit.V1.WatchMempoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchMempool, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SubmitServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubmitServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SubmitServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubmitTx, serviceImpl.SubmitTx)
          .AddMethod(__Method_WaitForTx, serviceImpl.WaitForTx)
          .AddMethod(__Method_ReadMempool, serviceImpl.ReadMempool)
          .AddMethod(__Method_WatchMempool, serviceImpl.WatchMempool).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SubmitServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubmitTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Utxorpc.Submit.V1.SubmitTxRequest, global::Utxorpc.Submit.V1.SubmitTxResponse>(serviceImpl.SubmitTx));
      serviceBinder.AddMethod(__Method_WaitForTx, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Utxorpc.Submit.V1.WaitForTxRequest, global::Utxorpc.Submit.V1.WaitForTxResponse>(serviceImpl.WaitForTx));
      serviceBinder.AddMethod(__Method_ReadMempool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Utxorpc.Submit.V1.ReadMempoolRequest, global::Utxorpc.Submit.V1.ReadMempoolResponse>(serviceImpl.ReadMempool));
      serviceBinder.AddMethod(__Method_WatchMempool, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Utxorpc.Submit.V1.WatchMempoolRequest, global::Utxorpc.Submit.V1.WatchMempoolResponse>(serviceImpl.WatchMempool));
    }

  }
}
#endregion
