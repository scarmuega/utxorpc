// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/submit/v1/submit.proto

package submitv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/utxorpc/submit/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SubmitServiceName is the fully-qualified name of the SubmitService service.
	SubmitServiceName = "utxorpc.submit.v1.SubmitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubmitServiceSubmitTxProcedure is the fully-qualified name of the SubmitService's SubmitTx RPC.
	SubmitServiceSubmitTxProcedure = "/utxorpc.submit.v1.SubmitService/SubmitTx"
	// SubmitServiceWaitForTxProcedure is the fully-qualified name of the SubmitService's WaitForTx RPC.
	SubmitServiceWaitForTxProcedure = "/utxorpc.submit.v1.SubmitService/WaitForTx"
	// SubmitServiceReadMempoolProcedure is the fully-qualified name of the SubmitService's ReadMempool
	// RPC.
	SubmitServiceReadMempoolProcedure = "/utxorpc.submit.v1.SubmitService/ReadMempool"
	// SubmitServiceWatchMempoolProcedure is the fully-qualified name of the SubmitService's
	// WatchMempool RPC.
	SubmitServiceWatchMempoolProcedure = "/utxorpc.submit.v1.SubmitService/WatchMempool"
)

// SubmitServiceClient is a client for the utxorpc.submit.v1.SubmitService service.
type SubmitServiceClient interface {
	SubmitTx(context.Context, *connect_go.Request[v1.SubmitTxRequest]) (*connect_go.Response[v1.SubmitTxResponse], error)
	WaitForTx(context.Context, *connect_go.Request[v1.WaitForTxRequest]) (*connect_go.ServerStreamForClient[v1.WaitForTxResponse], error)
	ReadMempool(context.Context, *connect_go.Request[v1.ReadMempoolRequest]) (*connect_go.Response[v1.ReadMempoolResponse], error)
	WatchMempool(context.Context, *connect_go.Request[v1.WatchMempoolRequest]) (*connect_go.ServerStreamForClient[v1.WatchMempoolResponse], error)
}

// NewSubmitServiceClient constructs a client for the utxorpc.submit.v1.SubmitService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubmitServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SubmitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &submitServiceClient{
		submitTx: connect_go.NewClient[v1.SubmitTxRequest, v1.SubmitTxResponse](
			httpClient,
			baseURL+SubmitServiceSubmitTxProcedure,
			opts...,
		),
		waitForTx: connect_go.NewClient[v1.WaitForTxRequest, v1.WaitForTxResponse](
			httpClient,
			baseURL+SubmitServiceWaitForTxProcedure,
			opts...,
		),
		readMempool: connect_go.NewClient[v1.ReadMempoolRequest, v1.ReadMempoolResponse](
			httpClient,
			baseURL+SubmitServiceReadMempoolProcedure,
			opts...,
		),
		watchMempool: connect_go.NewClient[v1.WatchMempoolRequest, v1.WatchMempoolResponse](
			httpClient,
			baseURL+SubmitServiceWatchMempoolProcedure,
			opts...,
		),
	}
}

// submitServiceClient implements SubmitServiceClient.
type submitServiceClient struct {
	submitTx     *connect_go.Client[v1.SubmitTxRequest, v1.SubmitTxResponse]
	waitForTx    *connect_go.Client[v1.WaitForTxRequest, v1.WaitForTxResponse]
	readMempool  *connect_go.Client[v1.ReadMempoolRequest, v1.ReadMempoolResponse]
	watchMempool *connect_go.Client[v1.WatchMempoolRequest, v1.WatchMempoolResponse]
}

// SubmitTx calls utxorpc.submit.v1.SubmitService.SubmitTx.
func (c *submitServiceClient) SubmitTx(ctx context.Context, req *connect_go.Request[v1.SubmitTxRequest]) (*connect_go.Response[v1.SubmitTxResponse], error) {
	return c.submitTx.CallUnary(ctx, req)
}

// WaitForTx calls utxorpc.submit.v1.SubmitService.WaitForTx.
func (c *submitServiceClient) WaitForTx(ctx context.Context, req *connect_go.Request[v1.WaitForTxRequest]) (*connect_go.ServerStreamForClient[v1.WaitForTxResponse], error) {
	return c.waitForTx.CallServerStream(ctx, req)
}

// ReadMempool calls utxorpc.submit.v1.SubmitService.ReadMempool.
func (c *submitServiceClient) ReadMempool(ctx context.Context, req *connect_go.Request[v1.ReadMempoolRequest]) (*connect_go.Response[v1.ReadMempoolResponse], error) {
	return c.readMempool.CallUnary(ctx, req)
}

// WatchMempool calls utxorpc.submit.v1.SubmitService.WatchMempool.
func (c *submitServiceClient) WatchMempool(ctx context.Context, req *connect_go.Request[v1.WatchMempoolRequest]) (*connect_go.ServerStreamForClient[v1.WatchMempoolResponse], error) {
	return c.watchMempool.CallServerStream(ctx, req)
}

// SubmitServiceHandler is an implementation of the utxorpc.submit.v1.SubmitService service.
type SubmitServiceHandler interface {
	SubmitTx(context.Context, *connect_go.Request[v1.SubmitTxRequest]) (*connect_go.Response[v1.SubmitTxResponse], error)
	WaitForTx(context.Context, *connect_go.Request[v1.WaitForTxRequest], *connect_go.ServerStream[v1.WaitForTxResponse]) error
	ReadMempool(context.Context, *connect_go.Request[v1.ReadMempoolRequest]) (*connect_go.Response[v1.ReadMempoolResponse], error)
	WatchMempool(context.Context, *connect_go.Request[v1.WatchMempoolRequest], *connect_go.ServerStream[v1.WatchMempoolResponse]) error
}

// NewSubmitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubmitServiceHandler(svc SubmitServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	submitServiceSubmitTxHandler := connect_go.NewUnaryHandler(
		SubmitServiceSubmitTxProcedure,
		svc.SubmitTx,
		opts...,
	)
	submitServiceWaitForTxHandler := connect_go.NewServerStreamHandler(
		SubmitServiceWaitForTxProcedure,
		svc.WaitForTx,
		opts...,
	)
	submitServiceReadMempoolHandler := connect_go.NewUnaryHandler(
		SubmitServiceReadMempoolProcedure,
		svc.ReadMempool,
		opts...,
	)
	submitServiceWatchMempoolHandler := connect_go.NewServerStreamHandler(
		SubmitServiceWatchMempoolProcedure,
		svc.WatchMempool,
		opts...,
	)
	return "/utxorpc.submit.v1.SubmitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubmitServiceSubmitTxProcedure:
			submitServiceSubmitTxHandler.ServeHTTP(w, r)
		case SubmitServiceWaitForTxProcedure:
			submitServiceWaitForTxHandler.ServeHTTP(w, r)
		case SubmitServiceReadMempoolProcedure:
			submitServiceReadMempoolHandler.ServeHTTP(w, r)
		case SubmitServiceWatchMempoolProcedure:
			submitServiceWatchMempoolHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubmitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubmitServiceHandler struct{}

func (UnimplementedSubmitServiceHandler) SubmitTx(context.Context, *connect_go.Request[v1.SubmitTxRequest]) (*connect_go.Response[v1.SubmitTxResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.SubmitTx is not implemented"))
}

func (UnimplementedSubmitServiceHandler) WaitForTx(context.Context, *connect_go.Request[v1.WaitForTxRequest], *connect_go.ServerStream[v1.WaitForTxResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.WaitForTx is not implemented"))
}

func (UnimplementedSubmitServiceHandler) ReadMempool(context.Context, *connect_go.Request[v1.ReadMempoolRequest]) (*connect_go.Response[v1.ReadMempoolResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.ReadMempool is not implemented"))
}

func (UnimplementedSubmitServiceHandler) WatchMempool(context.Context, *connect_go.Request[v1.WatchMempoolRequest], *connect_go.ServerStream[v1.WatchMempoolResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.WatchMempool is not implemented"))
}
