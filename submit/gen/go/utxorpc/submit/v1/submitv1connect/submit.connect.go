// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/submit/v1/submit.proto

package submitv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/utxorpc/submit/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SubmitServiceName is the fully-qualified name of the SubmitService service.
	SubmitServiceName = "utxorpc.submit.v1.SubmitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubmitServiceSubmitProcedure is the fully-qualified name of the SubmitService's Submit RPC.
	SubmitServiceSubmitProcedure = "/utxorpc.submit.v1.SubmitService/Submit"
	// SubmitServiceCheckProcedure is the fully-qualified name of the SubmitService's Check RPC.
	SubmitServiceCheckProcedure = "/utxorpc.submit.v1.SubmitService/Check"
	// SubmitServiceWaitForProcedure is the fully-qualified name of the SubmitService's WaitFor RPC.
	SubmitServiceWaitForProcedure = "/utxorpc.submit.v1.SubmitService/WaitFor"
)

// SubmitServiceClient is a client for the utxorpc.submit.v1.SubmitService service.
type SubmitServiceClient interface {
	Submit(context.Context, *connect_go.Request[v1.SubmitRequest]) (*connect_go.Response[v1.SubmitResponse], error)
	Check(context.Context, *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error)
	WaitFor(context.Context, *connect_go.Request[v1.WaitForRequest]) (*connect_go.ServerStreamForClient[v1.WaitForResponse], error)
}

// NewSubmitServiceClient constructs a client for the utxorpc.submit.v1.SubmitService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubmitServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SubmitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &submitServiceClient{
		submit: connect_go.NewClient[v1.SubmitRequest, v1.SubmitResponse](
			httpClient,
			baseURL+SubmitServiceSubmitProcedure,
			opts...,
		),
		check: connect_go.NewClient[v1.CheckRequest, v1.CheckResponse](
			httpClient,
			baseURL+SubmitServiceCheckProcedure,
			opts...,
		),
		waitFor: connect_go.NewClient[v1.WaitForRequest, v1.WaitForResponse](
			httpClient,
			baseURL+SubmitServiceWaitForProcedure,
			opts...,
		),
	}
}

// submitServiceClient implements SubmitServiceClient.
type submitServiceClient struct {
	submit  *connect_go.Client[v1.SubmitRequest, v1.SubmitResponse]
	check   *connect_go.Client[v1.CheckRequest, v1.CheckResponse]
	waitFor *connect_go.Client[v1.WaitForRequest, v1.WaitForResponse]
}

// Submit calls utxorpc.submit.v1.SubmitService.Submit.
func (c *submitServiceClient) Submit(ctx context.Context, req *connect_go.Request[v1.SubmitRequest]) (*connect_go.Response[v1.SubmitResponse], error) {
	return c.submit.CallUnary(ctx, req)
}

// Check calls utxorpc.submit.v1.SubmitService.Check.
func (c *submitServiceClient) Check(ctx context.Context, req *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// WaitFor calls utxorpc.submit.v1.SubmitService.WaitFor.
func (c *submitServiceClient) WaitFor(ctx context.Context, req *connect_go.Request[v1.WaitForRequest]) (*connect_go.ServerStreamForClient[v1.WaitForResponse], error) {
	return c.waitFor.CallServerStream(ctx, req)
}

// SubmitServiceHandler is an implementation of the utxorpc.submit.v1.SubmitService service.
type SubmitServiceHandler interface {
	Submit(context.Context, *connect_go.Request[v1.SubmitRequest]) (*connect_go.Response[v1.SubmitResponse], error)
	Check(context.Context, *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error)
	WaitFor(context.Context, *connect_go.Request[v1.WaitForRequest], *connect_go.ServerStream[v1.WaitForResponse]) error
}

// NewSubmitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubmitServiceHandler(svc SubmitServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SubmitServiceSubmitProcedure, connect_go.NewUnaryHandler(
		SubmitServiceSubmitProcedure,
		svc.Submit,
		opts...,
	))
	mux.Handle(SubmitServiceCheckProcedure, connect_go.NewUnaryHandler(
		SubmitServiceCheckProcedure,
		svc.Check,
		opts...,
	))
	mux.Handle(SubmitServiceWaitForProcedure, connect_go.NewServerStreamHandler(
		SubmitServiceWaitForProcedure,
		svc.WaitFor,
		opts...,
	))
	return "/utxorpc.submit.v1.SubmitService/", mux
}

// UnimplementedSubmitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubmitServiceHandler struct{}

func (UnimplementedSubmitServiceHandler) Submit(context.Context, *connect_go.Request[v1.SubmitRequest]) (*connect_go.Response[v1.SubmitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.Submit is not implemented"))
}

func (UnimplementedSubmitServiceHandler) Check(context.Context, *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.Check is not implemented"))
}

func (UnimplementedSubmitServiceHandler) WaitFor(context.Context, *connect_go.Request[v1.WaitForRequest], *connect_go.ServerStream[v1.WaitForResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.submit.v1.SubmitService.WaitFor is not implemented"))
}
