// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file utxorpc/v1/submit/submit.proto (package utxorpc.v1.submit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ReadMempoolRequest, ReadMempoolResponse, SubmitTxRequest, SubmitTxResponse, WaitForTxRequest, WaitForTxResponse, WatchMempoolRequest, WatchMempoolResponse } from "./submit_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Service definition for submitting transactions and checking their status.
 *
 * @generated from service utxorpc.v1.submit.SubmitService
 */
export const SubmitService = {
  typeName: "utxorpc.v1.submit.SubmitService",
  methods: {
    /**
     * Submit transactions to the blockchain.
     *
     * @generated from rpc utxorpc.v1.submit.SubmitService.SubmitTx
     */
    submitTx: {
      name: "SubmitTx",
      I: SubmitTxRequest,
      O: SubmitTxResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Wait for transactions to reach a certain stage and stream the updates.
     *
     * @generated from rpc utxorpc.v1.submit.SubmitService.WaitForTx
     */
    waitForTx: {
      name: "WaitForTx",
      I: WaitForTxRequest,
      O: WaitForTxResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Returns a point-in-time snapshot of the mempool.
     *
     * @generated from rpc utxorpc.v1.submit.SubmitService.ReadMempool
     */
    readMempool: {
      name: "ReadMempool",
      I: ReadMempoolRequest,
      O: ReadMempoolResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stream transactions from the mempool matching the specified predicates.
     *
     * @generated from rpc utxorpc.v1.submit.SubmitService.WatchMempool
     */
    watchMempool: {
      name: "WatchMempool",
      I: WatchMempoolRequest,
      O: WatchMempoolResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

