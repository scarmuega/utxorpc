name: "Build Haskell Package"

on:
  workflow_call: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HASKELL_ROOT: gen/haskell
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install protoc
        run: |
          PROTOC_ZIP=protoc-3.14.0-linux-x86_64.zip
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/$PROTOC_ZIP
          unzip -o $PROTOC_ZIP -d . bin/protoc
          unzip -o $PROTOC_ZIP -d . 'include/*'
          rm -f $PROTOC_ZIP
          echo "$(pwd)/bin" >> "$GITHUB_PATH"

      - name: Get Haskell codegen artifact
        id: download-haskell-codegen
        uses: actions/download-artifact@v4
        with:
          name: codegen
          path: gen

      - name: Setup Haskell
        id: setup-hs
        uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.6.4

      - name: Configure Cabal build
        run: |
          cd ${{ env.HASKELL_ROOT }}
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
        # ^ Creates a plan.json file equivalent to a package-lock.json, used for creating a cache key

      - name: Restore Cabal build cache
        uses: actions/cache/restore@v4
        id: cache-cabal-build
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup-hs.outputs.ghc-version
            }}-cabal-${{ steps.setup-hs.outputs.cabal-version }}
        with:
          path: ${{ steps.setup-hs.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: |
            ${{ env.key }}-

      - name: Get Package Version
        id: package-version
        run: |
          cd ${{ env.HASKELL_ROOT }}
          VERSION=$(sed -nE '/^version:\s*([0-9]\.[0-9]+\.[0-9]+.*)$/s||\1|p' utxorpc.cabal)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build Haskell Library
        id: build
        env:
          version: ${{ steps.package-version.outputs.VERSION }}
        run: |
          cd ${{ env.HASKELL_ROOT }}
          cabal build
          cabal sdist
          echo "SDIST-LOCATION=$(pwd)/dist-newstyle/sdist/utxorpc-${{ env.version }}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload Haskell Artifacts
        uses: actions/upload-artifact@v4
        env:
          version: ${{ steps.package-version.outputs.VERSION }}
          location: ${{ steps.build.outputs.SDIST-LOCATION }}
        with:
          name: haskell-${{ env.version }}
          path: ${{ env.location }}

      - name: Cache Cabal
        if: steps.cache-cabal-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.setup-hs.outputs.cabal-store }}
          key: ${{ steps.cache-cabal-build.outputs.cache-primary-key }}
