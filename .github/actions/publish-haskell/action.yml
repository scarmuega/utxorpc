name: "publish haskell"
description: "Publishes Haskell codegen spec to Hackage (WIP)"
inputs:
  registry-token:
    description: token to authenticate to Hackage registry
    required: false
  mode:
    description: supported values are 'release' and 'dry-run'
    required: true

runs:
  using: "composite"

  steps:
    - name: Setup Haskell
      id: setup-hs
      uses: haskell-actions/setup@v2
      with:
        enable-stack: true
        stack-no-global: true

    - name: Restore Stack
      id: restore-stack
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.setup-hs.outputs.stack-root }}
          codegen/haskell/.stack-work
        key: stack-${{ hashFiles('stack.yaml.lock') }}
        restore-keys: stack-

    - name: Install protoc
      shell: bash
      run: |
        PROTOC_ZIP=protoc-3.14.0-linux-x86_64.zip
        curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/$PROTOC_ZIP
        unzip -o $PROTOC_ZIP -d . bin/protoc
        unzip -o $PROTOC_ZIP -d . 'include/*'
        rm -f $PROTOC_ZIP
        echo "$(pwd)/bin" >> "$GITHUB_PATH"

    - name: Get Package Version
      id: package-version
      shell: bash
      working-directory: codegen/haskell
      run: |
        VERSION=$(sed -nE '/^version:\s*([0-9]\.[0-9]+\.[0-9]+.*)$/s||\1|p' utxorpc.cabal)
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

    - name: Build Dependencies
      id: build-dependencies
      shell: bash
      working-directory: codegen/haskell
      run: |
        stack build --only-dependencies

    - name: Test and build package
      id: build
      shell: bash
      working-directory: codegen/haskell
      env:
        version: ${{ steps.package-version.outputs.VERSION }}
      run: |
        stack test
        stack sdist
        TARBALL=$(stack sdist 2>&1 |
            sed -nE 's|^(.*utxorpc-.*\.tar\.gz).*$|\1|p')

        echo "TARBALL=$TARBALL" >> "$GITHUB_OUTPUT"

    - name: Upload GitHub artifacts
      if: inputs.mode == 'release'
      uses: actions/upload-artifact@v4
      env:
        version: ${{ steps.package-version.outputs.VERSION }}
        location: ${{ steps.build.outputs.TARBALL }}
      with:
        name: haskell-${{ env.version }}
        path: ${{ env.location }}

    - name: Generate Haddocks
      shell: bash
      working-directory: codegen/haskell
      run: stack haddock --haddock-for-hackage

    - name: Upload candidate to Hackage
      if: inputs.mode == 'dry-run'
      shell: bash
      working-directory: codegen/haskell
      run: |
        export HACKAGE_KEY=${{ inputs.registry-token }}
        stack upload --candidate --test-tarball .
        stack upload --candidate -d .

    - name: Upload to Hackage
      if: inputs.mode == 'release' && startsWith(github.ref, 'refs/tags/v')
      shell: bash
      working-directory: codegen/haskell
      run: |
        export HACKAGE_KEY=${{ inputs.registry-token }}
        stack upload --test-tarball .
        stack upload -d .

    - name: Cache Stack
      if: steps.restore-stack.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.setup-hs.outputs.stack-root }}
          codegen/haskell/.stack-work
        key: stack-${{ hashFiles('stack.yaml.lock') }}
