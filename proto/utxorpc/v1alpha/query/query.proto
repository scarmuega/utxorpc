/// A consistent view of the state of the ledger

syntax = "proto3";

package utxorpc.v1alpha.query;

import "google/protobuf/field_mask.proto";
import "utxorpc/v1alpha/cardano/cardano.proto";

// Represents a specific point in the blockchain.
message ChainPoint {
  uint64 slot = 1; // Slot number.
  uint64 height = 2; // Block height.
  bytes hash = 3; // Block hash.
}

// Request to get the chain parameters
message ReadParamsRequest {
  google.protobuf.FieldMask field_mask = 1; // Field mask to selectively return fields in the parsed response.
}

// An evenlope that holds parameter data from any of the compatible chains
message AnyChainParams {
  oneof params {
    utxorpc.v1alpha.cardano.Params cardano = 1; // Cardano parameters
  }
}

// Response containing the chain parameters
message ReadParamsResponse {
  AnyChainParams values = 1; // The value of the parameters.
  ChainPoint ledger_tip = 2; // The chain point that represent the ledger current position.
}

// An evenlope that holds an UTxO patterns from any of compatible chains
message AnyUtxoPattern {
  oneof utxo_pattern {
    utxorpc.v1alpha.cardano.TxOutputPattern cardano = 1;
  }
}

// Represents a simple utxo predicate that can composed to create more complext ones
message UtxoPredicate {
  AnyUtxoPattern match = 1; // Predicate is true if tx exhibits pattern.
  repeated UtxoPredicate not = 2; // Predicate is true if tx doesn't exhibit pattern.
  repeated UtxoPredicate all_of = 3; // Predicate is true if utxo exhibits all of the patterns.
  repeated UtxoPredicate any_of = 4; // Predicate is true if utxo exhibits any of the patterns.
}

// Request to get UTxOs by chain-specific criteria.
message ReadUtxosRequest {
  UtxoPredicate predicate = 1; // A predicate to filter relevant utxos.
  bool include_native = 3; // Flag to include the raw bytes in their native representation.
  bool include_parsed = 4; // Flag to parse the result vs using native bytes from the chain.
  google.protobuf.FieldMask field_mask = 7; // Field mask to selectively return fields in the parsed response.
}

// An evenlope that holds an UTxO from any of compatible chains
message AnyUtxoData {
  bytes native_bytes = 1; // An opaque bytestring corresponding to native representation in the source chain.
  oneof parsed_state {
    utxorpc.v1alpha.cardano.TxOutput cardano = 2; // A cardano UTxO
  }
}

// Response containing the UTxOs associated with the requested addresses.
message ReadUtxosResponse {
  repeated AnyUtxoData items = 1; // List of UTxOs.
  ChainPoint ledger_tip = 2; // The chain point that represent the ledger current position.
}

// Service definition for querying the state of the chain.
service QueryService {
  rpc ReadParams(ReadParamsRequest) returns (ReadParamsResponse); // Get overall chain state.
  rpc ReadUtxos(ReadUtxosRequest) returns (ReadUtxosResponse); // Read a slice of the utxo set
  rpc StreamUtxos(ReadUtxosRequest) returns (stream ReadUtxosResponse); // Stream all available utxos

  // TODO: decide if we want to expand the scope
  // rpc ReadAccount(ReadAccountRequest) returns (ReadAccountReponse); // Get state of a particular account
  // rpc ReadTxs(GetTxRequest) returns (GetTxResponse); // Get Txs by by chain-specific criteria.
}
