// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=.js"
// @generated from file utxorpc/sync/v1/sync.proto (package utxorpc.sync.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Block } from "@utxorpc/cardano-spec/utxorpc/cardano/v1/cardano_pb.js";

/**
 * Represents a reference to a specific block
 *
 * @generated from message utxorpc.sync.v1.BlockRef
 */
export class BlockRef extends Message<BlockRef> {
  /**
   * Height or slot number (depending on the blockchain)
   *
   * @generated from field: uint64 index = 1;
   */
  index = protoInt64.zero;

  /**
   * Hash of the content of the block
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<BlockRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.BlockRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockRef {
    return new BlockRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockRef {
    return new BlockRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockRef {
    return new BlockRef().fromJsonString(jsonString, options);
  }

  static equals(a: BlockRef | PlainMessage<BlockRef> | undefined, b: BlockRef | PlainMessage<BlockRef> | undefined): boolean {
    return proto3.util.equals(BlockRef, a, b);
  }
}

/**
 * @generated from message utxorpc.sync.v1.AnyChainBlock
 */
export class AnyChainBlock extends Message<AnyChainBlock> {
  /**
   * @generated from oneof utxorpc.sync.v1.AnyChainBlock.chain
   */
  chain: {
    /**
     * Original bytes for a raw block
     *
     * @generated from field: bytes raw = 1;
     */
    value: Uint8Array;
    case: "raw";
  } | {
    /**
     * A parsed Cardano block.
     *
     * @generated from field: utxorpc.cardano.v1.Block cardano = 2;
     */
    value: Block;
    case: "cardano";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AnyChainBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.AnyChainBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "chain" },
    { no: 2, name: "cardano", kind: "message", T: Block, oneof: "chain" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainBlock {
    return new AnyChainBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainBlock {
    return new AnyChainBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainBlock {
    return new AnyChainBlock().fromJsonString(jsonString, options);
  }

  static equals(a: AnyChainBlock | PlainMessage<AnyChainBlock> | undefined, b: AnyChainBlock | PlainMessage<AnyChainBlock> | undefined): boolean {
    return proto3.util.equals(AnyChainBlock, a, b);
  }
}

/**
 * Request to fetch a block by its reference.
 *
 * @generated from message utxorpc.sync.v1.FetchBlockRequest
 */
export class FetchBlockRequest extends Message<FetchBlockRequest> {
  /**
   * List of block references.
   *
   * @generated from field: repeated utxorpc.sync.v1.BlockRef ref = 1;
   */
  ref: BlockRef[] = [];

  /**
   * Field mask to selectively return fields.
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 2;
   */
  fieldMask?: FieldMask;

  constructor(data?: PartialMessage<FetchBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.FetchBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: BlockRef, repeated: true },
    { no: 2, name: "field_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchBlockRequest {
    return new FetchBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchBlockRequest {
    return new FetchBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchBlockRequest {
    return new FetchBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchBlockRequest | PlainMessage<FetchBlockRequest> | undefined, b: FetchBlockRequest | PlainMessage<FetchBlockRequest> | undefined): boolean {
    return proto3.util.equals(FetchBlockRequest, a, b);
  }
}

/**
 * Response containing the fetched blocks.
 *
 * @generated from message utxorpc.sync.v1.FetchBlockResponse
 */
export class FetchBlockResponse extends Message<FetchBlockResponse> {
  /**
   * List of fetched blocks.
   *
   * @generated from field: repeated utxorpc.sync.v1.AnyChainBlock block = 1;
   */
  block: AnyChainBlock[] = [];

  constructor(data?: PartialMessage<FetchBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.FetchBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block", kind: "message", T: AnyChainBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchBlockResponse {
    return new FetchBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchBlockResponse {
    return new FetchBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchBlockResponse {
    return new FetchBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchBlockResponse | PlainMessage<FetchBlockResponse> | undefined, b: FetchBlockResponse | PlainMessage<FetchBlockResponse> | undefined): boolean {
    return proto3.util.equals(FetchBlockResponse, a, b);
  }
}

/**
 * Request to dump the block history.
 *
 * @generated from message utxorpc.sync.v1.DumpHistoryRequest
 */
export class DumpHistoryRequest extends Message<DumpHistoryRequest> {
  /**
   * Starting point for the block history dump.
   *
   * @generated from field: utxorpc.sync.v1.BlockRef start_token = 2;
   */
  startToken?: BlockRef;

  /**
   * Maximum number of items to return.
   *
   * @generated from field: uint32 max_items = 3;
   */
  maxItems = 0;

  /**
   * Field mask to selectively return fields.
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 4;
   */
  fieldMask?: FieldMask;

  constructor(data?: PartialMessage<DumpHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.DumpHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "start_token", kind: "message", T: BlockRef },
    { no: 3, name: "max_items", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "field_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DumpHistoryRequest {
    return new DumpHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DumpHistoryRequest {
    return new DumpHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DumpHistoryRequest {
    return new DumpHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DumpHistoryRequest | PlainMessage<DumpHistoryRequest> | undefined, b: DumpHistoryRequest | PlainMessage<DumpHistoryRequest> | undefined): boolean {
    return proto3.util.equals(DumpHistoryRequest, a, b);
  }
}

/**
 * Response containing the dumped block history.
 *
 * @generated from message utxorpc.sync.v1.DumpHistoryResponse
 */
export class DumpHistoryResponse extends Message<DumpHistoryResponse> {
  /**
   * List of blocks in the history.
   *
   * @generated from field: repeated utxorpc.sync.v1.AnyChainBlock block = 1;
   */
  block: AnyChainBlock[] = [];

  /**
   * Next token for pagination.
   *
   * @generated from field: utxorpc.sync.v1.BlockRef next_token = 2;
   */
  nextToken?: BlockRef;

  constructor(data?: PartialMessage<DumpHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.DumpHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block", kind: "message", T: AnyChainBlock, repeated: true },
    { no: 2, name: "next_token", kind: "message", T: BlockRef },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DumpHistoryResponse {
    return new DumpHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DumpHistoryResponse {
    return new DumpHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DumpHistoryResponse {
    return new DumpHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DumpHistoryResponse | PlainMessage<DumpHistoryResponse> | undefined, b: DumpHistoryResponse | PlainMessage<DumpHistoryResponse> | undefined): boolean {
    return proto3.util.equals(DumpHistoryResponse, a, b);
  }
}

/**
 * Request to follow the tip of the blockchain.
 *
 * @generated from message utxorpc.sync.v1.FollowTipRequest
 */
export class FollowTipRequest extends Message<FollowTipRequest> {
  /**
   * List of block references to find the intersection.
   *
   * @generated from field: repeated utxorpc.sync.v1.BlockRef intersect = 1;
   */
  intersect: BlockRef[] = [];

  constructor(data?: PartialMessage<FollowTipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.FollowTipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intersect", kind: "message", T: BlockRef, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FollowTipRequest {
    return new FollowTipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FollowTipRequest {
    return new FollowTipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FollowTipRequest {
    return new FollowTipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FollowTipRequest | PlainMessage<FollowTipRequest> | undefined, b: FollowTipRequest | PlainMessage<FollowTipRequest> | undefined): boolean {
    return proto3.util.equals(FollowTipRequest, a, b);
  }
}

/**
 * Response containing the action to perform while following the tip.
 *
 * @generated from message utxorpc.sync.v1.FollowTipResponse
 */
export class FollowTipResponse extends Message<FollowTipResponse> {
  /**
   * @generated from oneof utxorpc.sync.v1.FollowTipResponse.action
   */
  action: {
    /**
     * Apply this block.
     *
     * @generated from field: utxorpc.sync.v1.AnyChainBlock apply = 1;
     */
    value: AnyChainBlock;
    case: "apply";
  } | {
    /**
     * Undo this block.
     *
     * @generated from field: utxorpc.sync.v1.AnyChainBlock undo = 2;
     */
    value: AnyChainBlock;
    case: "undo";
  } | {
    /**
     * Reset to this block reference.
     *
     * @generated from field: utxorpc.sync.v1.BlockRef reset = 3;
     */
    value: BlockRef;
    case: "reset";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FollowTipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.sync.v1.FollowTipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apply", kind: "message", T: AnyChainBlock, oneof: "action" },
    { no: 2, name: "undo", kind: "message", T: AnyChainBlock, oneof: "action" },
    { no: 3, name: "reset", kind: "message", T: BlockRef, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FollowTipResponse {
    return new FollowTipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FollowTipResponse {
    return new FollowTipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FollowTipResponse {
    return new FollowTipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FollowTipResponse | PlainMessage<FollowTipResponse> | undefined, b: FollowTipResponse | PlainMessage<FollowTipResponse> | undefined): boolean {
    return proto3.util.equals(FollowTipResponse, a, b);
  }
}

