syntax = "proto3";

package utxorpc.watch.v1;

import "google/protobuf/field_mask.proto";
import "utxorpc/cardano/v1/cardano.proto";

// Represents a tx pattern from any supported blockchain.
message AnyChainTxPattern {
  oneof chain {
    utxorpc.cardano.v1.TxPattern cardano = 1; // A Cardano tx pattern.
  }
}

message TxPredicate {
  AnyChainTxPattern match = 1;
  repeated TxPredicate not = 2;
  repeated TxPredicate all_of = 3;
  repeated TxPredicate any_of = 4;
}

// Request to watch transactions from the chain based on a set of predicates.
message WatchChainTxRequest {
  TxPredicate predicate = 1; // Predicate to filter transactions by.
  google.protobuf.FieldMask field_mask = 2; // Field mask to selectively return fields.
}

// Represents a transaction from any supported blockchain.
message AnyChainTx {
  oneof chain {
    utxorpc.cardano.v1.Tx cardano = 1; // A Cardano transaction.
  }
}

// Response containing the matching chain transactions.
message WatchChainTxResponse {
  oneof action {
    AnyChainTx apply = 1; // Apply this transaction.
    AnyChainTx undo = 2; // Undo this transaction.
  }
}

// Request to watch transactions based on a set of predicates.
message WatchMempoolTxRequest {
  TxPredicate predicate = 1; // A predicate to filter transactions by.
  google.protobuf.FieldMask field_mask = 2; // Field mask to selectively return fields.
}

// Response from mempool containing the matching transactions.
message WatchMempoolTxResponse {
  oneof chain {
    utxorpc.cardano.v1.Tx cardano = 1; // A Cardano transaction.
  }
}

// Service definition for watching transactions based on predicates.
service TxWatchService {
  rpc WatchChainTx(WatchChainTxRequest) returns (stream WatchChainTxResponse); // Stream transactions from the chain matching the specified predicates.
  rpc WatchMempoolTx(WatchMempoolTxRequest) returns (stream WatchMempoolTxResponse); // Stream transactions from the mempool matching the specified predicates.
}
