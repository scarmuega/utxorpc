// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/watch/v1/watch.proto

package watchv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/utxorpc/spec/watch/gen/go/utxorpc/watch/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WatchServiceName is the fully-qualified name of the WatchService service.
	WatchServiceName = "utxorpc.watch.v1.WatchService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WatchServiceWatchTxProcedure is the fully-qualified name of the WatchService's WatchTx RPC.
	WatchServiceWatchTxProcedure = "/utxorpc.watch.v1.WatchService/WatchTx"
)

// WatchServiceClient is a client for the utxorpc.watch.v1.WatchService service.
type WatchServiceClient interface {
	WatchTx(context.Context, *connect_go.Request[v1.WatchTxRequest]) (*connect_go.ServerStreamForClient[v1.WatchTxResponse], error)
}

// NewWatchServiceClient constructs a client for the utxorpc.watch.v1.WatchService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWatchServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WatchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &watchServiceClient{
		watchTx: connect_go.NewClient[v1.WatchTxRequest, v1.WatchTxResponse](
			httpClient,
			baseURL+WatchServiceWatchTxProcedure,
			opts...,
		),
	}
}

// watchServiceClient implements WatchServiceClient.
type watchServiceClient struct {
	watchTx *connect_go.Client[v1.WatchTxRequest, v1.WatchTxResponse]
}

// WatchTx calls utxorpc.watch.v1.WatchService.WatchTx.
func (c *watchServiceClient) WatchTx(ctx context.Context, req *connect_go.Request[v1.WatchTxRequest]) (*connect_go.ServerStreamForClient[v1.WatchTxResponse], error) {
	return c.watchTx.CallServerStream(ctx, req)
}

// WatchServiceHandler is an implementation of the utxorpc.watch.v1.WatchService service.
type WatchServiceHandler interface {
	WatchTx(context.Context, *connect_go.Request[v1.WatchTxRequest], *connect_go.ServerStream[v1.WatchTxResponse]) error
}

// NewWatchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWatchServiceHandler(svc WatchServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	watchServiceWatchTxHandler := connect_go.NewServerStreamHandler(
		WatchServiceWatchTxProcedure,
		svc.WatchTx,
		opts...,
	)
	return "/utxorpc.watch.v1.WatchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WatchServiceWatchTxProcedure:
			watchServiceWatchTxHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWatchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWatchServiceHandler struct{}

func (UnimplementedWatchServiceHandler) WatchTx(context.Context, *connect_go.Request[v1.WatchTxRequest], *connect_go.ServerStream[v1.WatchTxResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.watch.v1.WatchService.WatchTx is not implemented"))
}
