// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: utxorpc/ledger/v1/certs.proto

package ledgerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a stake credential in Cardano.
type StakeCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StakeCredential:
	//
	//	*StakeCredential_AddrKeyHash
	//	*StakeCredential_ScriptHash
	StakeCredential isStakeCredential_StakeCredential `protobuf_oneof:"stake_credential"`
}

func (x *StakeCredential) Reset() {
	*x = StakeCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeCredential) ProtoMessage() {}

func (x *StakeCredential) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeCredential.ProtoReflect.Descriptor instead.
func (*StakeCredential) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{0}
}

func (m *StakeCredential) GetStakeCredential() isStakeCredential_StakeCredential {
	if m != nil {
		return m.StakeCredential
	}
	return nil
}

func (x *StakeCredential) GetAddrKeyHash() []byte {
	if x, ok := x.GetStakeCredential().(*StakeCredential_AddrKeyHash); ok {
		return x.AddrKeyHash
	}
	return nil
}

func (x *StakeCredential) GetScriptHash() []byte {
	if x, ok := x.GetStakeCredential().(*StakeCredential_ScriptHash); ok {
		return x.ScriptHash
	}
	return nil
}

type isStakeCredential_StakeCredential interface {
	isStakeCredential_StakeCredential()
}

type StakeCredential_AddrKeyHash struct {
	AddrKeyHash []byte `protobuf:"bytes,1,opt,name=addr_key_hash,json=addrKeyHash,proto3,oneof"` // Address key hash.
}

type StakeCredential_ScriptHash struct {
	ScriptHash []byte `protobuf:"bytes,2,opt,name=script_hash,json=scriptHash,proto3,oneof"` // Script hash.
}

func (*StakeCredential_AddrKeyHash) isStakeCredential_StakeCredential() {}

func (*StakeCredential_ScriptHash) isStakeCredential_StakeCredential() {}

// Represents a unit interval in Cardano.
type UnitInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnitInterval) Reset() {
	*x = UnitInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitInterval) ProtoMessage() {}

func (x *UnitInterval) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitInterval.ProtoReflect.Descriptor instead.
func (*UnitInterval) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{1}
}

// Represents a relay in Cardano.
type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{2}
}

// Represents pool metadata in Cardano.
type PoolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PoolMetadata) Reset() {
	*x = PoolMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMetadata) ProtoMessage() {}

func (x *PoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMetadata.ProtoReflect.Descriptor instead.
func (*PoolMetadata) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{3}
}

// Represents a certificate in Cardano.
type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Certificate:
	//
	//	*Certificate_StakeRegistration
	//	*Certificate_StakeDeregistration
	//	*Certificate_StakeDelegation
	//	*Certificate_PoolRegistration
	//	*Certificate_PoolRetirement
	//	*Certificate_GenesisKeyDelegation
	//	*Certificate_MoveInstantaneousRewardsCert
	Certificate isCertificate_Certificate `protobuf_oneof:"certificate"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{4}
}

func (m *Certificate) GetCertificate() isCertificate_Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (x *Certificate) GetStakeRegistration() *StakeCredential {
	if x, ok := x.GetCertificate().(*Certificate_StakeRegistration); ok {
		return x.StakeRegistration
	}
	return nil
}

func (x *Certificate) GetStakeDeregistration() *StakeCredential {
	if x, ok := x.GetCertificate().(*Certificate_StakeDeregistration); ok {
		return x.StakeDeregistration
	}
	return nil
}

func (x *Certificate) GetStakeDelegation() *StakeDelegationCert {
	if x, ok := x.GetCertificate().(*Certificate_StakeDelegation); ok {
		return x.StakeDelegation
	}
	return nil
}

func (x *Certificate) GetPoolRegistration() *PoolRegistrationCert {
	if x, ok := x.GetCertificate().(*Certificate_PoolRegistration); ok {
		return x.PoolRegistration
	}
	return nil
}

func (x *Certificate) GetPoolRetirement() *PoolRetirementCert {
	if x, ok := x.GetCertificate().(*Certificate_PoolRetirement); ok {
		return x.PoolRetirement
	}
	return nil
}

func (x *Certificate) GetGenesisKeyDelegation() *GenesisKeyDelegationCert {
	if x, ok := x.GetCertificate().(*Certificate_GenesisKeyDelegation); ok {
		return x.GenesisKeyDelegation
	}
	return nil
}

func (x *Certificate) GetMoveInstantaneousRewardsCert() *MoveInstantaneousRewardCert {
	if x, ok := x.GetCertificate().(*Certificate_MoveInstantaneousRewardsCert); ok {
		return x.MoveInstantaneousRewardsCert
	}
	return nil
}

type isCertificate_Certificate interface {
	isCertificate_Certificate()
}

type Certificate_StakeRegistration struct {
	StakeRegistration *StakeCredential `protobuf:"bytes,1,opt,name=stake_registration,json=stakeRegistration,proto3,oneof"` // Stake registration certificate.
}

type Certificate_StakeDeregistration struct {
	StakeDeregistration *StakeCredential `protobuf:"bytes,2,opt,name=stake_deregistration,json=stakeDeregistration,proto3,oneof"` // Stake deregistration certificate.
}

type Certificate_StakeDelegation struct {
	StakeDelegation *StakeDelegationCert `protobuf:"bytes,3,opt,name=stake_delegation,json=stakeDelegation,proto3,oneof"` // Stake delegation certificate.
}

type Certificate_PoolRegistration struct {
	PoolRegistration *PoolRegistrationCert `protobuf:"bytes,4,opt,name=pool_registration,json=poolRegistration,proto3,oneof"` // Pool registration certificate.
}

type Certificate_PoolRetirement struct {
	PoolRetirement *PoolRetirementCert `protobuf:"bytes,5,opt,name=pool_retirement,json=poolRetirement,proto3,oneof"` // Pool retirement certificate.
}

type Certificate_GenesisKeyDelegation struct {
	GenesisKeyDelegation *GenesisKeyDelegationCert `protobuf:"bytes,6,opt,name=genesis_key_delegation,json=genesisKeyDelegation,proto3,oneof"` // Genesis key delegation certificate.
}

type Certificate_MoveInstantaneousRewardsCert struct {
	MoveInstantaneousRewardsCert *MoveInstantaneousRewardCert `protobuf:"bytes,7,opt,name=move_instantaneous_rewards_cert,json=moveInstantaneousRewardsCert,proto3,oneof"` // Move instantaneous rewards certificate.
}

func (*Certificate_StakeRegistration) isCertificate_Certificate() {}

func (*Certificate_StakeDeregistration) isCertificate_Certificate() {}

func (*Certificate_StakeDelegation) isCertificate_Certificate() {}

func (*Certificate_PoolRegistration) isCertificate_Certificate() {}

func (*Certificate_PoolRetirement) isCertificate_Certificate() {}

func (*Certificate_GenesisKeyDelegation) isCertificate_Certificate() {}

func (*Certificate_MoveInstantaneousRewardsCert) isCertificate_Certificate() {}

// Represents a stake delegation certificate in Cardano.
type StakeDelegationCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeCredential *StakeCredential `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"` // Stake credential.
	PoolKeyhash     []byte           `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`             // Pool key hash.
}

func (x *StakeDelegationCert) Reset() {
	*x = StakeDelegationCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeDelegationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeDelegationCert) ProtoMessage() {}

func (x *StakeDelegationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeDelegationCert.ProtoReflect.Descriptor instead.
func (*StakeDelegationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{5}
}

func (x *StakeDelegationCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeDelegationCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

// Represents a pool registration certificate in Cardano.
type PoolRegistrationCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator      []byte        `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`                                // Operator key hash.
	VrfKeyhash    []byte        `protobuf:"bytes,2,opt,name=vrf_keyhash,json=vrfKeyhash,proto3" json:"vrf_keyhash,omitempty"`          // VRF key hash.
	Pledge        uint64        `protobuf:"varint,3,opt,name=pledge,proto3" json:"pledge,omitempty"`                                   // Pledge amount.
	Cost          uint64        `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`                                       // Pool cost.
	Margin        *UnitInterval `protobuf:"bytes,5,opt,name=margin,proto3" json:"margin,omitempty"`                                    // Pool margin.
	RewardAccount []byte        `protobuf:"bytes,6,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"` // Reward account.
	PoolOwners    [][]byte      `protobuf:"bytes,7,rep,name=pool_owners,json=poolOwners,proto3" json:"pool_owners,omitempty"`          // List of pool owner key hashes.
	Relays        []*Relay      `protobuf:"bytes,8,rep,name=relays,proto3" json:"relays,omitempty"`                                    // List of relays.
	PoolMetadata  *PoolMetadata `protobuf:"bytes,9,opt,name=pool_metadata,json=poolMetadata,proto3" json:"pool_metadata,omitempty"`    // Pool metadata.
}

func (x *PoolRegistrationCert) Reset() {
	*x = PoolRegistrationCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRegistrationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRegistrationCert) ProtoMessage() {}

func (x *PoolRegistrationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRegistrationCert.ProtoReflect.Descriptor instead.
func (*PoolRegistrationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{6}
}

func (x *PoolRegistrationCert) GetOperator() []byte {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *PoolRegistrationCert) GetVrfKeyhash() []byte {
	if x != nil {
		return x.VrfKeyhash
	}
	return nil
}

func (x *PoolRegistrationCert) GetPledge() uint64 {
	if x != nil {
		return x.Pledge
	}
	return 0
}

func (x *PoolRegistrationCert) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *PoolRegistrationCert) GetMargin() *UnitInterval {
	if x != nil {
		return x.Margin
	}
	return nil
}

func (x *PoolRegistrationCert) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *PoolRegistrationCert) GetPoolOwners() [][]byte {
	if x != nil {
		return x.PoolOwners
	}
	return nil
}

func (x *PoolRegistrationCert) GetRelays() []*Relay {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *PoolRegistrationCert) GetPoolMetadata() *PoolMetadata {
	if x != nil {
		return x.PoolMetadata
	}
	return nil
}

// Represents a pool retirement certificate in Cardano.
type PoolRetirementCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolKeyhash []byte `protobuf:"bytes,1,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"` // Pool key hash.
	Epoch       uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`                               // Retirement epoch.
}

func (x *PoolRetirementCert) Reset() {
	*x = PoolRetirementCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRetirementCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRetirementCert) ProtoMessage() {}

func (x *PoolRetirementCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRetirementCert.ProtoReflect.Descriptor instead.
func (*PoolRetirementCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{7}
}

func (x *PoolRetirementCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

func (x *PoolRetirementCert) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// Represents a genesis key delegation certificate in Cardano.
type GenesisKeyDelegationCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisHash         []byte `protobuf:"bytes,1,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`                           // Genesis hash.
	GenesisDelegateHash []byte `protobuf:"bytes,2,opt,name=genesis_delegate_hash,json=genesisDelegateHash,proto3" json:"genesis_delegate_hash,omitempty"` // Genesis delegate hash.
	VrfKeyhash          []byte `protobuf:"bytes,3,opt,name=vrf_keyhash,json=vrfKeyhash,proto3" json:"vrf_keyhash,omitempty"`                              // VRF key hash.
}

func (x *GenesisKeyDelegationCert) Reset() {
	*x = GenesisKeyDelegationCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisKeyDelegationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisKeyDelegationCert) ProtoMessage() {}

func (x *GenesisKeyDelegationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisKeyDelegationCert.ProtoReflect.Descriptor instead.
func (*GenesisKeyDelegationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{8}
}

func (x *GenesisKeyDelegationCert) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *GenesisKeyDelegationCert) GetGenesisDelegateHash() []byte {
	if x != nil {
		return x.GenesisDelegateHash
	}
	return nil
}

func (x *GenesisKeyDelegationCert) GetVrfKeyhash() []byte {
	if x != nil {
		return x.VrfKeyhash
	}
	return nil
}

// Represents a move instantaneous reward certificate in Cardano.
type MoveInstantaneousRewardCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveInstantaneousRewardCert) Reset() {
	*x = MoveInstantaneousRewardCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveInstantaneousRewardCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveInstantaneousRewardCert) ProtoMessage() {}

func (x *MoveInstantaneousRewardCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_ledger_v1_certs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveInstantaneousRewardCert.ProtoReflect.Descriptor instead.
func (*MoveInstantaneousRewardCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_ledger_v1_certs_proto_rawDescGZIP(), []int{9}
}

var File_utxorpc_ledger_v1_certs_proto protoreflect.FileDescriptor

var file_utxorpc_ledger_v1_certs_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x22, 0x6e, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x42, 0x12,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x50,
	0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x05, 0x0a, 0x0b,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a,
	0x1f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65,
	0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x43, 0x65, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x4d, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x22,
	0xf8, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x72, 0x66, 0x4b, 0x65,
	0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x6f,
	0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x12, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x76, 0x72, 0x66, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x22, 0x1d,
	0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x65, 0x72, 0x74, 0x42, 0xc6, 0x01,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x43, 0x65, 0x72, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x75, 0x66, 0x2d, 0x74,
	0x6f, 0x75, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x55, 0x4c, 0x58, 0xaa, 0x02, 0x11, 0x55, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x55,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x5c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1d, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x5c, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x13, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_utxorpc_ledger_v1_certs_proto_rawDescOnce sync.Once
	file_utxorpc_ledger_v1_certs_proto_rawDescData = file_utxorpc_ledger_v1_certs_proto_rawDesc
)

func file_utxorpc_ledger_v1_certs_proto_rawDescGZIP() []byte {
	file_utxorpc_ledger_v1_certs_proto_rawDescOnce.Do(func() {
		file_utxorpc_ledger_v1_certs_proto_rawDescData = protoimpl.X.CompressGZIP(file_utxorpc_ledger_v1_certs_proto_rawDescData)
	})
	return file_utxorpc_ledger_v1_certs_proto_rawDescData
}

var file_utxorpc_ledger_v1_certs_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_utxorpc_ledger_v1_certs_proto_goTypes = []interface{}{
	(*StakeCredential)(nil),             // 0: utxorpc.ledger.v1.StakeCredential
	(*UnitInterval)(nil),                // 1: utxorpc.ledger.v1.UnitInterval
	(*Relay)(nil),                       // 2: utxorpc.ledger.v1.Relay
	(*PoolMetadata)(nil),                // 3: utxorpc.ledger.v1.PoolMetadata
	(*Certificate)(nil),                 // 4: utxorpc.ledger.v1.Certificate
	(*StakeDelegationCert)(nil),         // 5: utxorpc.ledger.v1.StakeDelegationCert
	(*PoolRegistrationCert)(nil),        // 6: utxorpc.ledger.v1.PoolRegistrationCert
	(*PoolRetirementCert)(nil),          // 7: utxorpc.ledger.v1.PoolRetirementCert
	(*GenesisKeyDelegationCert)(nil),    // 8: utxorpc.ledger.v1.GenesisKeyDelegationCert
	(*MoveInstantaneousRewardCert)(nil), // 9: utxorpc.ledger.v1.MoveInstantaneousRewardCert
}
var file_utxorpc_ledger_v1_certs_proto_depIdxs = []int32{
	0,  // 0: utxorpc.ledger.v1.Certificate.stake_registration:type_name -> utxorpc.ledger.v1.StakeCredential
	0,  // 1: utxorpc.ledger.v1.Certificate.stake_deregistration:type_name -> utxorpc.ledger.v1.StakeCredential
	5,  // 2: utxorpc.ledger.v1.Certificate.stake_delegation:type_name -> utxorpc.ledger.v1.StakeDelegationCert
	6,  // 3: utxorpc.ledger.v1.Certificate.pool_registration:type_name -> utxorpc.ledger.v1.PoolRegistrationCert
	7,  // 4: utxorpc.ledger.v1.Certificate.pool_retirement:type_name -> utxorpc.ledger.v1.PoolRetirementCert
	8,  // 5: utxorpc.ledger.v1.Certificate.genesis_key_delegation:type_name -> utxorpc.ledger.v1.GenesisKeyDelegationCert
	9,  // 6: utxorpc.ledger.v1.Certificate.move_instantaneous_rewards_cert:type_name -> utxorpc.ledger.v1.MoveInstantaneousRewardCert
	0,  // 7: utxorpc.ledger.v1.StakeDelegationCert.stake_credential:type_name -> utxorpc.ledger.v1.StakeCredential
	1,  // 8: utxorpc.ledger.v1.PoolRegistrationCert.margin:type_name -> utxorpc.ledger.v1.UnitInterval
	2,  // 9: utxorpc.ledger.v1.PoolRegistrationCert.relays:type_name -> utxorpc.ledger.v1.Relay
	3,  // 10: utxorpc.ledger.v1.PoolRegistrationCert.pool_metadata:type_name -> utxorpc.ledger.v1.PoolMetadata
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_utxorpc_ledger_v1_certs_proto_init() }
func file_utxorpc_ledger_v1_certs_proto_init() {
	if File_utxorpc_ledger_v1_certs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_utxorpc_ledger_v1_certs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeDelegationCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRegistrationCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRetirementCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisKeyDelegationCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_ledger_v1_certs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveInstantaneousRewardCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_utxorpc_ledger_v1_certs_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StakeCredential_AddrKeyHash)(nil),
		(*StakeCredential_ScriptHash)(nil),
	}
	file_utxorpc_ledger_v1_certs_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Certificate_StakeRegistration)(nil),
		(*Certificate_StakeDeregistration)(nil),
		(*Certificate_StakeDelegation)(nil),
		(*Certificate_PoolRegistration)(nil),
		(*Certificate_PoolRetirement)(nil),
		(*Certificate_GenesisKeyDelegation)(nil),
		(*Certificate_MoveInstantaneousRewardsCert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_utxorpc_ledger_v1_certs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_utxorpc_ledger_v1_certs_proto_goTypes,
		DependencyIndexes: file_utxorpc_ledger_v1_certs_proto_depIdxs,
		MessageInfos:      file_utxorpc_ledger_v1_certs_proto_msgTypes,
	}.Build()
	File_utxorpc_ledger_v1_certs_proto = out.File
	file_utxorpc_ledger_v1_certs_proto_rawDesc = nil
	file_utxorpc_ledger_v1_certs_proto_goTypes = nil
	file_utxorpc_ledger_v1_certs_proto_depIdxs = nil
}
