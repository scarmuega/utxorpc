// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=.ts"
// @generated from file utxorpc/cardano/v1/cardano.proto (package utxorpc.cardano.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Purpose of the redeemer in a transaction.
 *
 * @generated from enum utxorpc.cardano.v1.RedeemerPurpose
 */
export enum RedeemerPurpose {
  /**
   * @generated from enum value: REDEEMER_PURPOSE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_SPEND = 1;
   */
  SPEND = 1,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_MINT = 2;
   */
  MINT = 2,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_CERT = 3;
   */
  CERT = 3,

  /**
   * @generated from enum value: REDEEMER_PURPOSE_REWARD = 4;
   */
  REWARD = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RedeemerPurpose)
proto3.util.setEnumType(RedeemerPurpose, "utxorpc.cardano.v1.RedeemerPurpose", [
  { no: 0, name: "REDEEMER_PURPOSE_UNSPECIFIED" },
  { no: 1, name: "REDEEMER_PURPOSE_SPEND" },
  { no: 2, name: "REDEEMER_PURPOSE_MINT" },
  { no: 3, name: "REDEEMER_PURPOSE_CERT" },
  { no: 4, name: "REDEEMER_PURPOSE_REWARD" },
]);

/**
 * @generated from enum utxorpc.cardano.v1.MirSource
 */
export enum MirSource {
  /**
   * @generated from enum value: MIR_SOURCE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MIR_SOURCE_RESERVES = 1;
   */
  RESERVES = 1,

  /**
   * @generated from enum value: MIR_SOURCE_TREASURY = 2;
   */
  TREASURY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MirSource)
proto3.util.setEnumType(MirSource, "utxorpc.cardano.v1.MirSource", [
  { no: 0, name: "MIR_SOURCE_UNSPECIFIED" },
  { no: 1, name: "MIR_SOURCE_RESERVES" },
  { no: 2, name: "MIR_SOURCE_TREASURY" },
]);

/**
 * Redeemer information for a Plutus script.
 *
 * @generated from message utxorpc.cardano.v1.Redeemer
 */
export class Redeemer extends Message<Redeemer> {
  /**
   * Purpose of the redeemer.
   *
   * @generated from field: utxorpc.cardano.v1.RedeemerPurpose purpose = 1;
   */
  purpose = RedeemerPurpose.UNSPECIFIED;

  /**
   * Plutus data associated with the redeemer.
   *
   * @generated from field: utxorpc.cardano.v1.PlutusData datum = 2;
   */
  datum?: PlutusData;

  constructor(data?: PartialMessage<Redeemer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Redeemer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "purpose", kind: "enum", T: proto3.getEnumType(RedeemerPurpose) },
    { no: 2, name: "datum", kind: "message", T: PlutusData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Redeemer {
    return new Redeemer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Redeemer {
    return new Redeemer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Redeemer {
    return new Redeemer().fromJsonString(jsonString, options);
  }

  static equals(a: Redeemer | PlainMessage<Redeemer> | undefined, b: Redeemer | PlainMessage<Redeemer> | undefined): boolean {
    return proto3.util.equals(Redeemer, a, b);
  }
}

/**
 * Represents a transaction input in the Cardano blockchain.
 *
 * @generated from message utxorpc.cardano.v1.TxInput
 */
export class TxInput extends Message<TxInput> {
  /**
   * Hash of the previous transaction.
   *
   * @generated from field: bytes tx_hash = 1;
   */
  txHash = new Uint8Array(0);

  /**
   * Index of the output in the previous transaction.
   *
   * @generated from field: uint32 output_index = 2;
   */
  outputIndex = 0;

  /**
   * Content of the input represented as output of the related transaction
   *
   * @generated from field: utxorpc.cardano.v1.TxOutput as_output = 3;
   */
  asOutput?: TxOutput;

  /**
   * Redeemer for the Plutus script.
   *
   * @generated from field: utxorpc.cardano.v1.Redeemer redeemer = 4;
   */
  redeemer?: Redeemer;

  constructor(data?: PartialMessage<TxInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.TxInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "output_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "as_output", kind: "message", T: TxOutput },
    { no: 4, name: "redeemer", kind: "message", T: Redeemer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxInput {
    return new TxInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxInput {
    return new TxInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxInput {
    return new TxInput().fromJsonString(jsonString, options);
  }

  static equals(a: TxInput | PlainMessage<TxInput> | undefined, b: TxInput | PlainMessage<TxInput> | undefined): boolean {
    return proto3.util.equals(TxInput, a, b);
  }
}

/**
 * Represents a transaction output in the Cardano blockchain.
 *
 * @generated from message utxorpc.cardano.v1.TxOutput
 */
export class TxOutput extends Message<TxOutput> {
  /**
   * Address receiving the output.
   *
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * Amount of ADA in the output.
   *
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  /**
   * Additional native (non-ADA) assets in the output.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Multiasset assets = 3;
   */
  assets: Multiasset[] = [];

  /**
   * Plutus data associated with the output.
   *
   * @generated from field: utxorpc.cardano.v1.PlutusData datum = 4;
   */
  datum?: PlutusData;

  /**
   * Hash of the Plutus data.
   *
   * @generated from field: bytes datum_hash = 5;
   */
  datumHash = new Uint8Array(0);

  /**
   * Script associated with the output.
   *
   * @generated from field: utxorpc.cardano.v1.Script script = 6;
   */
  script?: Script;

  constructor(data?: PartialMessage<TxOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.TxOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "assets", kind: "message", T: Multiasset, repeated: true },
    { no: 4, name: "datum", kind: "message", T: PlutusData },
    { no: 5, name: "datum_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "script", kind: "message", T: Script },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxOutput {
    return new TxOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxOutput {
    return new TxOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxOutput {
    return new TxOutput().fromJsonString(jsonString, options);
  }

  static equals(a: TxOutput | PlainMessage<TxOutput> | undefined, b: TxOutput | PlainMessage<TxOutput> | undefined): boolean {
    return proto3.util.equals(TxOutput, a, b);
  }
}

/**
 * Represents a custom asset in the Cardano blockchain.
 *
 * @generated from message utxorpc.cardano.v1.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * Name of the custom asset.
   *
   * @generated from field: bytes name = 1;
   */
  name = new Uint8Array(0);

  /**
   * Quantity of the custom asset in case of an output.
   *
   * @generated from field: uint64 output_coin = 2;
   */
  outputCoin = protoInt64.zero;

  /**
   * Quantity of the custom asset in case of a mint.
   *
   * @generated from field: int64 mint_coin = 3;
   */
  mintCoin = protoInt64.zero;

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "output_coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "mint_coin", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

/**
 * Represents a multi-asset group in the Cardano blockchain.
 *
 * @generated from message utxorpc.cardano.v1.Multiasset
 */
export class Multiasset extends Message<Multiasset> {
  /**
   * Policy ID governing the custom assets.
   *
   * @generated from field: bytes policy_id = 1;
   */
  policyId = new Uint8Array(0);

  /**
   * List of custom assets.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Asset assets = 2;
   */
  assets: Asset[] = [];

  constructor(data?: PartialMessage<Multiasset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Multiasset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policy_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "assets", kind: "message", T: Asset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Multiasset {
    return new Multiasset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Multiasset {
    return new Multiasset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Multiasset {
    return new Multiasset().fromJsonString(jsonString, options);
  }

  static equals(a: Multiasset | PlainMessage<Multiasset> | undefined, b: Multiasset | PlainMessage<Multiasset> | undefined): boolean {
    return proto3.util.equals(Multiasset, a, b);
  }
}

/**
 * Represents the validity interval of a transaction.
 *
 * @generated from message utxorpc.cardano.v1.TxValidity
 */
export class TxValidity extends Message<TxValidity> {
  /**
   * Start of the validity interval.
   *
   * @generated from field: uint64 start = 1;
   */
  start = protoInt64.zero;

  /**
   * End of the validity interval (TTL: Time to Live).
   *
   * @generated from field: uint64 ttl = 2;
   */
  ttl = protoInt64.zero;

  constructor(data?: PartialMessage<TxValidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.TxValidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ttl", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxValidity {
    return new TxValidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxValidity {
    return new TxValidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxValidity {
    return new TxValidity().fromJsonString(jsonString, options);
  }

  static equals(a: TxValidity | PlainMessage<TxValidity> | undefined, b: TxValidity | PlainMessage<TxValidity> | undefined): boolean {
    return proto3.util.equals(TxValidity, a, b);
  }
}

/**
 * Represents the collateral information for a transaction.
 *
 * @generated from message utxorpc.cardano.v1.Collateral
 */
export class Collateral extends Message<Collateral> {
  /**
   * Collateral inputs for the transaction.
   *
   * @generated from field: repeated utxorpc.cardano.v1.TxInput collateral = 1;
   */
  collateral: TxInput[] = [];

  /**
   * Collateral return in case of script failure.
   *
   * @generated from field: utxorpc.cardano.v1.TxOutput collateral_return = 2;
   */
  collateralReturn?: TxOutput;

  /**
   * Total amount of collateral.
   *
   * @generated from field: uint64 total_collateral = 3;
   */
  totalCollateral = protoInt64.zero;

  constructor(data?: PartialMessage<Collateral>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Collateral";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral", kind: "message", T: TxInput, repeated: true },
    { no: 2, name: "collateral_return", kind: "message", T: TxOutput },
    { no: 3, name: "total_collateral", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collateral {
    return new Collateral().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collateral {
    return new Collateral().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collateral {
    return new Collateral().fromJsonString(jsonString, options);
  }

  static equals(a: Collateral | PlainMessage<Collateral> | undefined, b: Collateral | PlainMessage<Collateral> | undefined): boolean {
    return proto3.util.equals(Collateral, a, b);
  }
}

/**
 * Represents a withdrawal from a reward account.
 *
 * @generated from message utxorpc.cardano.v1.Withdrawal
 */
export class Withdrawal extends Message<Withdrawal> {
  /**
   * Address of the reward account.
   *
   * @generated from field: bytes reward_account = 1;
   */
  rewardAccount = new Uint8Array(0);

  /**
   * Amount of ADA withdrawn.
   *
   * @generated from field: uint64 coin = 2;
   */
  coin = protoInt64.zero;

  constructor(data?: PartialMessage<Withdrawal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Withdrawal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "coin", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Withdrawal {
    return new Withdrawal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Withdrawal {
    return new Withdrawal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Withdrawal {
    return new Withdrawal().fromJsonString(jsonString, options);
  }

  static equals(a: Withdrawal | PlainMessage<Withdrawal> | undefined, b: Withdrawal | PlainMessage<Withdrawal> | undefined): boolean {
    return proto3.util.equals(Withdrawal, a, b);
  }
}

/**
 * Represents a set of witnesses that validate a transaction
 *
 * @generated from message utxorpc.cardano.v1.WitnessSet
 */
export class WitnessSet extends Message<WitnessSet> {
  /**
   * List of VKey witnesses.
   *
   * @generated from field: repeated utxorpc.cardano.v1.VKeyWitness vkeywitness = 1;
   */
  vkeywitness: VKeyWitness[] = [];

  /**
   * List of scripts.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Script script = 2;
   */
  script: Script[] = [];

  /**
   * List of Plutus data elements associated with the transaction.
   *
   * @generated from field: repeated utxorpc.cardano.v1.PlutusData plutus_datums = 3;
   */
  plutusDatums: PlutusData[] = [];

  constructor(data?: PartialMessage<WitnessSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.WitnessSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vkeywitness", kind: "message", T: VKeyWitness, repeated: true },
    { no: 2, name: "script", kind: "message", T: Script, repeated: true },
    { no: 3, name: "plutus_datums", kind: "message", T: PlutusData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WitnessSet {
    return new WitnessSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WitnessSet {
    return new WitnessSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WitnessSet {
    return new WitnessSet().fromJsonString(jsonString, options);
  }

  static equals(a: WitnessSet | PlainMessage<WitnessSet> | undefined, b: WitnessSet | PlainMessage<WitnessSet> | undefined): boolean {
    return proto3.util.equals(WitnessSet, a, b);
  }
}

/**
 * Auxiliary data not directly tied to the validation process
 *
 * @generated from message utxorpc.cardano.v1.AuxData
 */
export class AuxData extends Message<AuxData> {
  /**
   * List of auxiliary metadata elements.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Metadata metadata = 1;
   */
  metadata: Metadata[] = [];

  /**
   * List of auxiliary scripts.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Script scripts = 2;
   */
  scripts: Script[] = [];

  constructor(data?: PartialMessage<AuxData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.AuxData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata, repeated: true },
    { no: 2, name: "scripts", kind: "message", T: Script, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuxData {
    return new AuxData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuxData {
    return new AuxData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuxData {
    return new AuxData().fromJsonString(jsonString, options);
  }

  static equals(a: AuxData | PlainMessage<AuxData> | undefined, b: AuxData | PlainMessage<AuxData> | undefined): boolean {
    return proto3.util.equals(AuxData, a, b);
  }
}

/**
 * Represents a transaction in the Cardano blockchain.
 *
 * @generated from message utxorpc.cardano.v1.Tx
 */
export class Tx extends Message<Tx> {
  /**
   * List of transaction inputs
   *
   * @generated from field: repeated utxorpc.cardano.v1.TxInput inputs = 1;
   */
  inputs: TxInput[] = [];

  /**
   * List of transaction outputs
   *
   * @generated from field: repeated utxorpc.cardano.v1.TxOutput outputs = 2;
   */
  outputs: TxOutput[] = [];

  /**
   * List of certificates
   *
   * @generated from field: repeated utxorpc.cardano.v1.Certificate certificates = 3;
   */
  certificates: Certificate[] = [];

  /**
   * List of withdrawals
   *
   * @generated from field: repeated utxorpc.cardano.v1.Withdrawal withdrawals = 4;
   */
  withdrawals: Withdrawal[] = [];

  /**
   * List of minted custom assets
   *
   * @generated from field: repeated utxorpc.cardano.v1.Multiasset mint = 5;
   */
  mint: Multiasset[] = [];

  /**
   * List of reference inputs
   *
   * @generated from field: repeated utxorpc.cardano.v1.TxInput reference_inputs = 6;
   */
  referenceInputs: TxInput[] = [];

  /**
   * Witnesses that validte the transaction
   *
   * @generated from field: utxorpc.cardano.v1.WitnessSet witnesses = 7;
   */
  witnesses?: WitnessSet;

  /**
   * Collateral details in case of failed transaction
   *
   * @generated from field: utxorpc.cardano.v1.Collateral collateral = 8;
   */
  collateral?: Collateral;

  /**
   * Transaction fee in ADA
   *
   * @generated from field: uint64 fee = 9;
   */
  fee = protoInt64.zero;

  /**
   * Validity interval of the transaction
   *
   * @generated from field: utxorpc.cardano.v1.TxValidity validity = 10;
   */
  validity?: TxValidity;

  /**
   * Flag indicating whether the transaction was successful
   *
   * @generated from field: bool successful = 11;
   */
  successful = false;

  /**
   * Auxiliary data not directly tied to the validation process
   *
   * @generated from field: utxorpc.cardano.v1.AuxData auxiliary = 12;
   */
  auxiliary?: AuxData;

  constructor(data?: PartialMessage<Tx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Tx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inputs", kind: "message", T: TxInput, repeated: true },
    { no: 2, name: "outputs", kind: "message", T: TxOutput, repeated: true },
    { no: 3, name: "certificates", kind: "message", T: Certificate, repeated: true },
    { no: 4, name: "withdrawals", kind: "message", T: Withdrawal, repeated: true },
    { no: 5, name: "mint", kind: "message", T: Multiasset, repeated: true },
    { no: 6, name: "reference_inputs", kind: "message", T: TxInput, repeated: true },
    { no: 7, name: "witnesses", kind: "message", T: WitnessSet },
    { no: 8, name: "collateral", kind: "message", T: Collateral },
    { no: 9, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "validity", kind: "message", T: TxValidity },
    { no: 11, name: "successful", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "auxiliary", kind: "message", T: AuxData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tx {
    return new Tx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tx {
    return new Tx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tx {
    return new Tx().fromJsonString(jsonString, options);
  }

  static equals(a: Tx | PlainMessage<Tx> | undefined, b: Tx | PlainMessage<Tx> | undefined): boolean {
    return proto3.util.equals(Tx, a, b);
  }
}

/**
 * Contains the header information for a block.
 *
 * @generated from message utxorpc.cardano.v1.BlockHeader
 */
export class BlockHeader extends Message<BlockHeader> {
  /**
   * Slot number.
   *
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * Block hash.
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<BlockHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.BlockHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockHeader {
    return new BlockHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockHeader {
    return new BlockHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockHeader {
    return new BlockHeader().fromJsonString(jsonString, options);
  }

  static equals(a: BlockHeader | PlainMessage<BlockHeader> | undefined, b: BlockHeader | PlainMessage<BlockHeader> | undefined): boolean {
    return proto3.util.equals(BlockHeader, a, b);
  }
}

/**
 * Contains the transaction data for a block.
 *
 * @generated from message utxorpc.cardano.v1.BlockBody
 */
export class BlockBody extends Message<BlockBody> {
  /**
   * List of transactions.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Tx tx = 1;
   */
  tx: Tx[] = [];

  constructor(data?: PartialMessage<BlockBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.BlockBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "message", T: Tx, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockBody {
    return new BlockBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockBody {
    return new BlockBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockBody {
    return new BlockBody().fromJsonString(jsonString, options);
  }

  static equals(a: BlockBody | PlainMessage<BlockBody> | undefined, b: BlockBody | PlainMessage<BlockBody> | undefined): boolean {
    return proto3.util.equals(BlockBody, a, b);
  }
}

/**
 * Represents a complete block, including header and body.
 *
 * @generated from message utxorpc.cardano.v1.Block
 */
export class Block extends Message<Block> {
  /**
   * Block header.
   *
   * @generated from field: utxorpc.cardano.v1.BlockHeader header = 1;
   */
  header?: BlockHeader;

  /**
   * Block body.
   *
   * @generated from field: utxorpc.cardano.v1.BlockBody body = 2;
   */
  body?: BlockBody;

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BlockHeader },
    { no: 2, name: "body", kind: "message", T: BlockBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * Represents a VKey witness used to sign a transaction.
 *
 * @generated from message utxorpc.cardano.v1.VKeyWitness
 */
export class VKeyWitness extends Message<VKeyWitness> {
  /**
   * Verification key.
   *
   * @generated from field: bytes vkey = 1;
   */
  vkey = new Uint8Array(0);

  /**
   * Signature generated using the associated private key.
   *
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<VKeyWitness>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.VKeyWitness";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vkey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VKeyWitness {
    return new VKeyWitness().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VKeyWitness {
    return new VKeyWitness().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VKeyWitness {
    return new VKeyWitness().fromJsonString(jsonString, options);
  }

  static equals(a: VKeyWitness | PlainMessage<VKeyWitness> | undefined, b: VKeyWitness | PlainMessage<VKeyWitness> | undefined): boolean {
    return proto3.util.equals(VKeyWitness, a, b);
  }
}

/**
 * Represents a native script in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.NativeScript
 */
export class NativeScript extends Message<NativeScript> {
  /**
   * @generated from oneof utxorpc.cardano.v1.NativeScript.native_script
   */
  nativeScript: {
    /**
     * Script based on an address key hash.
     *
     * @generated from field: bytes script_pubkey = 1;
     */
    value: Uint8Array;
    case: "scriptPubkey";
  } | {
    /**
     * Script that requires all nested scripts to be satisfied.
     *
     * @generated from field: utxorpc.cardano.v1.NativeScriptList script_all = 2;
     */
    value: NativeScriptList;
    case: "scriptAll";
  } | {
    /**
     * Script that requires any of the nested scripts to be satisfied.
     *
     * @generated from field: utxorpc.cardano.v1.NativeScriptList script_any = 3;
     */
    value: NativeScriptList;
    case: "scriptAny";
  } | {
    /**
     * Script that requires k out of n nested scripts to be satisfied.
     *
     * @generated from field: utxorpc.cardano.v1.ScriptNOfK script_n_of_k = 4;
     */
    value: ScriptNOfK;
    case: "scriptNOfK";
  } | {
    /**
     * Slot number before which the script is invalid.
     *
     * @generated from field: uint64 invalid_before = 5;
     */
    value: bigint;
    case: "invalidBefore";
  } | {
    /**
     * Slot number after which the script is invalid.
     *
     * @generated from field: uint64 invalid_hereafter = 6;
     */
    value: bigint;
    case: "invalidHereafter";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NativeScript>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.NativeScript";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "script_pubkey", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "native_script" },
    { no: 2, name: "script_all", kind: "message", T: NativeScriptList, oneof: "native_script" },
    { no: 3, name: "script_any", kind: "message", T: NativeScriptList, oneof: "native_script" },
    { no: 4, name: "script_n_of_k", kind: "message", T: ScriptNOfK, oneof: "native_script" },
    { no: 5, name: "invalid_before", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "native_script" },
    { no: 6, name: "invalid_hereafter", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "native_script" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeScript {
    return new NativeScript().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeScript {
    return new NativeScript().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeScript {
    return new NativeScript().fromJsonString(jsonString, options);
  }

  static equals(a: NativeScript | PlainMessage<NativeScript> | undefined, b: NativeScript | PlainMessage<NativeScript> | undefined): boolean {
    return proto3.util.equals(NativeScript, a, b);
  }
}

/**
 * Represents a list of native scripts.
 *
 * @generated from message utxorpc.cardano.v1.NativeScriptList
 */
export class NativeScriptList extends Message<NativeScriptList> {
  /**
   * List of native scripts.
   *
   * @generated from field: repeated utxorpc.cardano.v1.NativeScript items = 1;
   */
  items: NativeScript[] = [];

  constructor(data?: PartialMessage<NativeScriptList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.NativeScriptList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: NativeScript, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeScriptList {
    return new NativeScriptList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeScriptList {
    return new NativeScriptList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeScriptList {
    return new NativeScriptList().fromJsonString(jsonString, options);
  }

  static equals(a: NativeScriptList | PlainMessage<NativeScriptList> | undefined, b: NativeScriptList | PlainMessage<NativeScriptList> | undefined): boolean {
    return proto3.util.equals(NativeScriptList, a, b);
  }
}

/**
 * Represents a "k out of n" native script.
 *
 * @generated from message utxorpc.cardano.v1.ScriptNOfK
 */
export class ScriptNOfK extends Message<ScriptNOfK> {
  /**
   * The number of required satisfied scripts.
   *
   * @generated from field: uint32 k = 1;
   */
  k = 0;

  /**
   * List of native scripts.
   *
   * @generated from field: repeated utxorpc.cardano.v1.NativeScript scripts = 2;
   */
  scripts: NativeScript[] = [];

  constructor(data?: PartialMessage<ScriptNOfK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.ScriptNOfK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "k", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "scripts", kind: "message", T: NativeScript, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScriptNOfK {
    return new ScriptNOfK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScriptNOfK {
    return new ScriptNOfK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScriptNOfK {
    return new ScriptNOfK().fromJsonString(jsonString, options);
  }

  static equals(a: ScriptNOfK | PlainMessage<ScriptNOfK> | undefined, b: ScriptNOfK | PlainMessage<ScriptNOfK> | undefined): boolean {
    return proto3.util.equals(ScriptNOfK, a, b);
  }
}

/**
 * Represents a constructor for Plutus data in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.Constr
 */
export class Constr extends Message<Constr> {
  /**
   * @generated from field: uint32 tag = 1;
   */
  tag = 0;

  /**
   * @generated from field: uint64 any_constructor = 2;
   */
  anyConstructor = protoInt64.zero;

  /**
   * @generated from field: repeated utxorpc.cardano.v1.PlutusData fields = 3;
   */
  fields: PlutusData[] = [];

  constructor(data?: PartialMessage<Constr>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Constr";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "any_constructor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "fields", kind: "message", T: PlutusData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constr {
    return new Constr().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constr {
    return new Constr().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constr {
    return new Constr().fromJsonString(jsonString, options);
  }

  static equals(a: Constr | PlainMessage<Constr> | undefined, b: Constr | PlainMessage<Constr> | undefined): boolean {
    return proto3.util.equals(Constr, a, b);
  }
}

/**
 * Represents a big integer for Plutus data in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.BigInt
 */
export class BigInt extends Message<BigInt> {
  /**
   * @generated from oneof utxorpc.cardano.v1.BigInt.big_int
   */
  bigInt: {
    /**
     * @generated from field: int64 int = 1;
     */
    value: bigint;
    case: "int";
  } | {
    /**
     * @generated from field: bytes big_u_int = 2;
     */
    value: Uint8Array;
    case: "bigUInt";
  } | {
    /**
     * @generated from field: bytes big_n_int = 3;
     */
    value: Uint8Array;
    case: "bigNInt";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BigInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.BigInt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "big_int" },
    { no: 2, name: "big_u_int", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "big_int" },
    { no: 3, name: "big_n_int", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "big_int" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigInt {
    return new BigInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJsonString(jsonString, options);
  }

  static equals(a: BigInt | PlainMessage<BigInt> | undefined, b: BigInt | PlainMessage<BigInt> | undefined): boolean {
    return proto3.util.equals(BigInt, a, b);
  }
}

/**
 * Represents a key-value pair for Plutus data in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PlutusDataPair
 */
export class PlutusDataPair extends Message<PlutusDataPair> {
  /**
   * Key of the pair.
   *
   * @generated from field: utxorpc.cardano.v1.PlutusData key = 1;
   */
  key?: PlutusData;

  /**
   * Value of the pair.
   *
   * @generated from field: utxorpc.cardano.v1.PlutusData value = 2;
   */
  value?: PlutusData;

  constructor(data?: PartialMessage<PlutusDataPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PlutusDataPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: PlutusData },
    { no: 2, name: "value", kind: "message", T: PlutusData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataPair {
    return new PlutusDataPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataPair {
    return new PlutusDataPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataPair {
    return new PlutusDataPair().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusDataPair | PlainMessage<PlutusDataPair> | undefined, b: PlutusDataPair | PlainMessage<PlutusDataPair> | undefined): boolean {
    return proto3.util.equals(PlutusDataPair, a, b);
  }
}

/**
 * Represents a Plutus data item in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PlutusData
 */
export class PlutusData extends Message<PlutusData> {
  /**
   * @generated from oneof utxorpc.cardano.v1.PlutusData.plutus_data
   */
  plutusData: {
    /**
     * Constructor.
     *
     * @generated from field: utxorpc.cardano.v1.Constr constr = 1;
     */
    value: Constr;
    case: "constr";
  } | {
    /**
     * Map of Plutus data.
     *
     * @generated from field: utxorpc.cardano.v1.PlutusDataMap map = 2;
     */
    value: PlutusDataMap;
    case: "map";
  } | {
    /**
     * Big integer.
     *
     * @generated from field: utxorpc.cardano.v1.BigInt big_int = 3;
     */
    value: BigInt;
    case: "bigInt";
  } | {
    /**
     * Bounded bytes.
     *
     * @generated from field: bytes bounded_bytes = 4;
     */
    value: Uint8Array;
    case: "boundedBytes";
  } | {
    /**
     * Array of Plutus data.
     *
     * @generated from field: utxorpc.cardano.v1.PlutusDataArray array = 5;
     */
    value: PlutusDataArray;
    case: "array";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PlutusData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PlutusData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "constr", kind: "message", T: Constr, oneof: "plutus_data" },
    { no: 2, name: "map", kind: "message", T: PlutusDataMap, oneof: "plutus_data" },
    { no: 3, name: "big_int", kind: "message", T: BigInt, oneof: "plutus_data" },
    { no: 4, name: "bounded_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "plutus_data" },
    { no: 5, name: "array", kind: "message", T: PlutusDataArray, oneof: "plutus_data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusData {
    return new PlutusData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusData {
    return new PlutusData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusData {
    return new PlutusData().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusData | PlainMessage<PlutusData> | undefined, b: PlutusData | PlainMessage<PlutusData> | undefined): boolean {
    return proto3.util.equals(PlutusData, a, b);
  }
}

/**
 * Represents a map of Plutus data in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PlutusDataMap
 */
export class PlutusDataMap extends Message<PlutusDataMap> {
  /**
   * List of key-value pairs.
   *
   * @generated from field: repeated utxorpc.cardano.v1.PlutusDataPair pairs = 1;
   */
  pairs: PlutusDataPair[] = [];

  constructor(data?: PartialMessage<PlutusDataMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PlutusDataMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: PlutusDataPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataMap {
    return new PlutusDataMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataMap {
    return new PlutusDataMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataMap {
    return new PlutusDataMap().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusDataMap | PlainMessage<PlutusDataMap> | undefined, b: PlutusDataMap | PlainMessage<PlutusDataMap> | undefined): boolean {
    return proto3.util.equals(PlutusDataMap, a, b);
  }
}

/**
 * Represents an array of Plutus data in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PlutusDataArray
 */
export class PlutusDataArray extends Message<PlutusDataArray> {
  /**
   * List of Plutus data items.
   *
   * @generated from field: repeated utxorpc.cardano.v1.PlutusData items = 1;
   */
  items: PlutusData[] = [];

  constructor(data?: PartialMessage<PlutusDataArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PlutusDataArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: PlutusData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataArray {
    return new PlutusDataArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataArray {
    return new PlutusDataArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataArray {
    return new PlutusDataArray().fromJsonString(jsonString, options);
  }

  static equals(a: PlutusDataArray | PlainMessage<PlutusDataArray> | undefined, b: PlutusDataArray | PlainMessage<PlutusDataArray> | undefined): boolean {
    return proto3.util.equals(PlutusDataArray, a, b);
  }
}

/**
 * Represents a script in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.Script
 */
export class Script extends Message<Script> {
  /**
   * @generated from oneof utxorpc.cardano.v1.Script.script
   */
  script: {
    /**
     * Native script.
     *
     * @generated from field: utxorpc.cardano.v1.NativeScript native = 1;
     */
    value: NativeScript;
    case: "native";
  } | {
    /**
     * Plutus V1 script.
     *
     * @generated from field: bytes plutus_v1 = 2;
     */
    value: Uint8Array;
    case: "plutusV1";
  } | {
    /**
     * Plutus V2 script.
     *
     * @generated from field: bytes plutus_v2 = 3;
     */
    value: Uint8Array;
    case: "plutusV2";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Script>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Script";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "native", kind: "message", T: NativeScript, oneof: "script" },
    { no: 2, name: "plutus_v1", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "script" },
    { no: 3, name: "plutus_v2", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "script" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Script {
    return new Script().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Script {
    return new Script().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Script {
    return new Script().fromJsonString(jsonString, options);
  }

  static equals(a: Script | PlainMessage<Script> | undefined, b: Script | PlainMessage<Script> | undefined): boolean {
    return proto3.util.equals(Script, a, b);
  }
}

/**
 * @generated from message utxorpc.cardano.v1.Metadatum
 */
export class Metadatum extends Message<Metadatum> {
  /**
   * @generated from oneof utxorpc.cardano.v1.Metadatum.metadatum
   */
  metadatum: {
    /**
     * @generated from field: int64 int = 1;
     */
    value: bigint;
    case: "int";
  } | {
    /**
     * @generated from field: bytes bytes = 2;
     */
    value: Uint8Array;
    case: "bytes";
  } | {
    /**
     * @generated from field: string text = 3;
     */
    value: string;
    case: "text";
  } | {
    /**
     * @generated from field: utxorpc.cardano.v1.MetadatumArray array = 4;
     */
    value: MetadatumArray;
    case: "array";
  } | {
    /**
     * @generated from field: utxorpc.cardano.v1.MetadatumMap map = 5;
     */
    value: MetadatumMap;
    case: "map";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Metadatum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Metadatum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "metadatum" },
    { no: 2, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "metadatum" },
    { no: 3, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "metadatum" },
    { no: 4, name: "array", kind: "message", T: MetadatumArray, oneof: "metadatum" },
    { no: 5, name: "map", kind: "message", T: MetadatumMap, oneof: "metadatum" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadatum {
    return new Metadatum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadatum {
    return new Metadatum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadatum {
    return new Metadatum().fromJsonString(jsonString, options);
  }

  static equals(a: Metadatum | PlainMessage<Metadatum> | undefined, b: Metadatum | PlainMessage<Metadatum> | undefined): boolean {
    return proto3.util.equals(Metadatum, a, b);
  }
}

/**
 * @generated from message utxorpc.cardano.v1.MetadatumArray
 */
export class MetadatumArray extends Message<MetadatumArray> {
  /**
   * @generated from field: repeated utxorpc.cardano.v1.Metadatum items = 1;
   */
  items: Metadatum[] = [];

  constructor(data?: PartialMessage<MetadatumArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.MetadatumArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Metadatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumArray {
    return new MetadatumArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumArray {
    return new MetadatumArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumArray {
    return new MetadatumArray().fromJsonString(jsonString, options);
  }

  static equals(a: MetadatumArray | PlainMessage<MetadatumArray> | undefined, b: MetadatumArray | PlainMessage<MetadatumArray> | undefined): boolean {
    return proto3.util.equals(MetadatumArray, a, b);
  }
}

/**
 * @generated from message utxorpc.cardano.v1.MetadatumMap
 */
export class MetadatumMap extends Message<MetadatumMap> {
  /**
   * @generated from field: repeated utxorpc.cardano.v1.MetadatumPair pairs = 1;
   */
  pairs: MetadatumPair[] = [];

  constructor(data?: PartialMessage<MetadatumMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.MetadatumMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: MetadatumPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumMap {
    return new MetadatumMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumMap {
    return new MetadatumMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumMap {
    return new MetadatumMap().fromJsonString(jsonString, options);
  }

  static equals(a: MetadatumMap | PlainMessage<MetadatumMap> | undefined, b: MetadatumMap | PlainMessage<MetadatumMap> | undefined): boolean {
    return proto3.util.equals(MetadatumMap, a, b);
  }
}

/**
 * @generated from message utxorpc.cardano.v1.MetadatumPair
 */
export class MetadatumPair extends Message<MetadatumPair> {
  /**
   * @generated from field: utxorpc.cardano.v1.Metadatum key = 1;
   */
  key?: Metadatum;

  /**
   * @generated from field: utxorpc.cardano.v1.Metadatum value = 2;
   */
  value?: Metadatum;

  constructor(data?: PartialMessage<MetadatumPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.MetadatumPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: Metadatum },
    { no: 2, name: "value", kind: "message", T: Metadatum },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumPair {
    return new MetadatumPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumPair {
    return new MetadatumPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumPair {
    return new MetadatumPair().fromJsonString(jsonString, options);
  }

  static equals(a: MetadatumPair | PlainMessage<MetadatumPair> | undefined, b: MetadatumPair | PlainMessage<MetadatumPair> | undefined): boolean {
    return proto3.util.equals(MetadatumPair, a, b);
  }
}

/**
 * @generated from message utxorpc.cardano.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: uint64 label = 1;
   */
  label = protoInt64.zero;

  /**
   * @generated from field: utxorpc.cardano.v1.Metadatum value = 2;
   */
  value?: Metadatum;

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "value", kind: "message", T: Metadatum },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * Represents a stake credential in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.StakeCredential
 */
export class StakeCredential extends Message<StakeCredential> {
  /**
   * @generated from oneof utxorpc.cardano.v1.StakeCredential.stake_credential
   */
  stakeCredential: {
    /**
     * Address key hash.
     *
     * @generated from field: bytes addr_key_hash = 1;
     */
    value: Uint8Array;
    case: "addrKeyHash";
  } | {
    /**
     * Script hash.
     *
     * @generated from field: bytes script_hash = 2;
     */
    value: Uint8Array;
    case: "scriptHash";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StakeCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.StakeCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addr_key_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "stake_credential" },
    { no: 2, name: "script_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "stake_credential" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeCredential {
    return new StakeCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeCredential {
    return new StakeCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeCredential {
    return new StakeCredential().fromJsonString(jsonString, options);
  }

  static equals(a: StakeCredential | PlainMessage<StakeCredential> | undefined, b: StakeCredential | PlainMessage<StakeCredential> | undefined): boolean {
    return proto3.util.equals(StakeCredential, a, b);
  }
}

/**
 * Represents a rational number as a fraction.
 *
 * @generated from message utxorpc.cardano.v1.RationalNumber
 */
export class RationalNumber extends Message<RationalNumber> {
  /**
   * @generated from field: int32 numerator = 1;
   */
  numerator = 0;

  /**
   * @generated from field: uint32 denominator = 2;
   */
  denominator = 0;

  constructor(data?: PartialMessage<RationalNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.RationalNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numerator", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "denominator", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RationalNumber {
    return new RationalNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RationalNumber {
    return new RationalNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RationalNumber {
    return new RationalNumber().fromJsonString(jsonString, options);
  }

  static equals(a: RationalNumber | PlainMessage<RationalNumber> | undefined, b: RationalNumber | PlainMessage<RationalNumber> | undefined): boolean {
    return proto3.util.equals(RationalNumber, a, b);
  }
}

/**
 * Represents a relay in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.Relay
 */
export class Relay extends Message<Relay> {
  /**
   * @generated from field: bytes ip_v4 = 1;
   */
  ipV4 = new Uint8Array(0);

  /**
   * @generated from field: bytes ip_v6 = 2;
   */
  ipV6 = new Uint8Array(0);

  /**
   * @generated from field: string dns_name = 3;
   */
  dnsName = "";

  /**
   * @generated from field: uint32 port = 4;
   */
  port = 0;

  constructor(data?: PartialMessage<Relay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Relay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ip_v4", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "ip_v6", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "dns_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relay {
    return new Relay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relay {
    return new Relay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relay {
    return new Relay().fromJsonString(jsonString, options);
  }

  static equals(a: Relay | PlainMessage<Relay> | undefined, b: Relay | PlainMessage<Relay> | undefined): boolean {
    return proto3.util.equals(Relay, a, b);
  }
}

/**
 * Represents pool metadata in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PoolMetadata
 */
export class PoolMetadata extends Message<PoolMetadata> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<PoolMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PoolMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolMetadata {
    return new PoolMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolMetadata {
    return new PoolMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolMetadata {
    return new PoolMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: PoolMetadata | PlainMessage<PoolMetadata> | undefined, b: PoolMetadata | PlainMessage<PoolMetadata> | undefined): boolean {
    return proto3.util.equals(PoolMetadata, a, b);
  }
}

/**
 * Represents a certificate in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.Certificate
 */
export class Certificate extends Message<Certificate> {
  /**
   * @generated from oneof utxorpc.cardano.v1.Certificate.certificate
   */
  certificate: {
    /**
     * Stake registration certificate.
     *
     * @generated from field: utxorpc.cardano.v1.StakeCredential stake_registration = 1;
     */
    value: StakeCredential;
    case: "stakeRegistration";
  } | {
    /**
     * Stake deregistration certificate.
     *
     * @generated from field: utxorpc.cardano.v1.StakeCredential stake_deregistration = 2;
     */
    value: StakeCredential;
    case: "stakeDeregistration";
  } | {
    /**
     * Stake delegation certificate.
     *
     * @generated from field: utxorpc.cardano.v1.StakeDelegationCert stake_delegation = 3;
     */
    value: StakeDelegationCert;
    case: "stakeDelegation";
  } | {
    /**
     * Pool registration certificate.
     *
     * @generated from field: utxorpc.cardano.v1.PoolRegistrationCert pool_registration = 4;
     */
    value: PoolRegistrationCert;
    case: "poolRegistration";
  } | {
    /**
     * Pool retirement certificate.
     *
     * @generated from field: utxorpc.cardano.v1.PoolRetirementCert pool_retirement = 5;
     */
    value: PoolRetirementCert;
    case: "poolRetirement";
  } | {
    /**
     * Genesis key delegation certificate.
     *
     * @generated from field: utxorpc.cardano.v1.GenesisKeyDelegationCert genesis_key_delegation = 6;
     */
    value: GenesisKeyDelegationCert;
    case: "genesisKeyDelegation";
  } | {
    /**
     * Move instantaneous rewards certificate.
     *
     * @generated from field: utxorpc.cardano.v1.MirCert mir_cert = 7;
     */
    value: MirCert;
    case: "mirCert";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Certificate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.Certificate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_registration", kind: "message", T: StakeCredential, oneof: "certificate" },
    { no: 2, name: "stake_deregistration", kind: "message", T: StakeCredential, oneof: "certificate" },
    { no: 3, name: "stake_delegation", kind: "message", T: StakeDelegationCert, oneof: "certificate" },
    { no: 4, name: "pool_registration", kind: "message", T: PoolRegistrationCert, oneof: "certificate" },
    { no: 5, name: "pool_retirement", kind: "message", T: PoolRetirementCert, oneof: "certificate" },
    { no: 6, name: "genesis_key_delegation", kind: "message", T: GenesisKeyDelegationCert, oneof: "certificate" },
    { no: 7, name: "mir_cert", kind: "message", T: MirCert, oneof: "certificate" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Certificate {
    return new Certificate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Certificate {
    return new Certificate().fromJsonString(jsonString, options);
  }

  static equals(a: Certificate | PlainMessage<Certificate> | undefined, b: Certificate | PlainMessage<Certificate> | undefined): boolean {
    return proto3.util.equals(Certificate, a, b);
  }
}

/**
 * Represents a stake delegation certificate in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.StakeDelegationCert
 */
export class StakeDelegationCert extends Message<StakeDelegationCert> {
  /**
   * Stake credential.
   *
   * @generated from field: utxorpc.cardano.v1.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * Pool key hash.
   *
   * @generated from field: bytes pool_keyhash = 2;
   */
  poolKeyhash = new Uint8Array(0);

  constructor(data?: PartialMessage<StakeDelegationCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.StakeDelegationCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeDelegationCert {
    return new StakeDelegationCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeDelegationCert {
    return new StakeDelegationCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeDelegationCert {
    return new StakeDelegationCert().fromJsonString(jsonString, options);
  }

  static equals(a: StakeDelegationCert | PlainMessage<StakeDelegationCert> | undefined, b: StakeDelegationCert | PlainMessage<StakeDelegationCert> | undefined): boolean {
    return proto3.util.equals(StakeDelegationCert, a, b);
  }
}

/**
 * Represents a pool registration certificate in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PoolRegistrationCert
 */
export class PoolRegistrationCert extends Message<PoolRegistrationCert> {
  /**
   * Operator key hash.
   *
   * @generated from field: bytes operator = 1;
   */
  operator = new Uint8Array(0);

  /**
   * VRF key hash.
   *
   * @generated from field: bytes vrf_keyhash = 2;
   */
  vrfKeyhash = new Uint8Array(0);

  /**
   * Pledge amount.
   *
   * @generated from field: uint64 pledge = 3;
   */
  pledge = protoInt64.zero;

  /**
   * Pool cost.
   *
   * @generated from field: uint64 cost = 4;
   */
  cost = protoInt64.zero;

  /**
   * Pool margin.
   *
   * @generated from field: utxorpc.cardano.v1.RationalNumber margin = 5;
   */
  margin?: RationalNumber;

  /**
   * Reward account.
   *
   * @generated from field: bytes reward_account = 6;
   */
  rewardAccount = new Uint8Array(0);

  /**
   * List of pool owner key hashes.
   *
   * @generated from field: repeated bytes pool_owners = 7;
   */
  poolOwners: Uint8Array[] = [];

  /**
   * List of relays.
   *
   * @generated from field: repeated utxorpc.cardano.v1.Relay relays = 8;
   */
  relays: Relay[] = [];

  /**
   * Pool metadata.
   *
   * @generated from field: utxorpc.cardano.v1.PoolMetadata pool_metadata = 9;
   */
  poolMetadata?: PoolMetadata;

  constructor(data?: PartialMessage<PoolRegistrationCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PoolRegistrationCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "vrf_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "pledge", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "margin", kind: "message", T: RationalNumber },
    { no: 6, name: "reward_account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "pool_owners", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 8, name: "relays", kind: "message", T: Relay, repeated: true },
    { no: 9, name: "pool_metadata", kind: "message", T: PoolMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRegistrationCert {
    return new PoolRegistrationCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRegistrationCert {
    return new PoolRegistrationCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRegistrationCert {
    return new PoolRegistrationCert().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRegistrationCert | PlainMessage<PoolRegistrationCert> | undefined, b: PoolRegistrationCert | PlainMessage<PoolRegistrationCert> | undefined): boolean {
    return proto3.util.equals(PoolRegistrationCert, a, b);
  }
}

/**
 * Represents a pool retirement certificate in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.PoolRetirementCert
 */
export class PoolRetirementCert extends Message<PoolRetirementCert> {
  /**
   * Pool key hash.
   *
   * @generated from field: bytes pool_keyhash = 1;
   */
  poolKeyhash = new Uint8Array(0);

  /**
   * Retirement epoch.
   *
   * @generated from field: uint64 epoch = 2;
   */
  epoch = protoInt64.zero;

  constructor(data?: PartialMessage<PoolRetirementCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.PoolRetirementCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRetirementCert {
    return new PoolRetirementCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRetirementCert {
    return new PoolRetirementCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRetirementCert {
    return new PoolRetirementCert().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRetirementCert | PlainMessage<PoolRetirementCert> | undefined, b: PoolRetirementCert | PlainMessage<PoolRetirementCert> | undefined): boolean {
    return proto3.util.equals(PoolRetirementCert, a, b);
  }
}

/**
 * Represents a genesis key delegation certificate in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.GenesisKeyDelegationCert
 */
export class GenesisKeyDelegationCert extends Message<GenesisKeyDelegationCert> {
  /**
   * Genesis hash.
   *
   * @generated from field: bytes genesis_hash = 1;
   */
  genesisHash = new Uint8Array(0);

  /**
   * Genesis delegate hash.
   *
   * @generated from field: bytes genesis_delegate_hash = 2;
   */
  genesisDelegateHash = new Uint8Array(0);

  /**
   * VRF key hash.
   *
   * @generated from field: bytes vrf_keyhash = 3;
   */
  vrfKeyhash = new Uint8Array(0);

  constructor(data?: PartialMessage<GenesisKeyDelegationCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.GenesisKeyDelegationCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genesis_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "genesis_delegate_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "vrf_keyhash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisKeyDelegationCert {
    return new GenesisKeyDelegationCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisKeyDelegationCert {
    return new GenesisKeyDelegationCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisKeyDelegationCert {
    return new GenesisKeyDelegationCert().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisKeyDelegationCert | PlainMessage<GenesisKeyDelegationCert> | undefined, b: GenesisKeyDelegationCert | PlainMessage<GenesisKeyDelegationCert> | undefined): boolean {
    return proto3.util.equals(GenesisKeyDelegationCert, a, b);
  }
}

/**
 * @generated from message utxorpc.cardano.v1.MirTarget
 */
export class MirTarget extends Message<MirTarget> {
  /**
   * @generated from field: utxorpc.cardano.v1.StakeCredential stake_credential = 1;
   */
  stakeCredential?: StakeCredential;

  /**
   * @generated from field: int64 delta_coin = 2;
   */
  deltaCoin = protoInt64.zero;

  constructor(data?: PartialMessage<MirTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.MirTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stake_credential", kind: "message", T: StakeCredential },
    { no: 2, name: "delta_coin", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirTarget {
    return new MirTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirTarget {
    return new MirTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirTarget {
    return new MirTarget().fromJsonString(jsonString, options);
  }

  static equals(a: MirTarget | PlainMessage<MirTarget> | undefined, b: MirTarget | PlainMessage<MirTarget> | undefined): boolean {
    return proto3.util.equals(MirTarget, a, b);
  }
}

/**
 * Represents a move instantaneous reward certificate in Cardano.
 *
 * @generated from message utxorpc.cardano.v1.MirCert
 */
export class MirCert extends Message<MirCert> {
  /**
   * @generated from field: utxorpc.cardano.v1.MirSource from = 1;
   */
  from = MirSource.UNSPECIFIED;

  /**
   * @generated from field: repeated utxorpc.cardano.v1.MirTarget to = 2;
   */
  to: MirTarget[] = [];

  /**
   * @generated from field: uint64 other_pot = 3;
   */
  otherPot = protoInt64.zero;

  constructor(data?: PartialMessage<MirCert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "utxorpc.cardano.v1.MirCert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "enum", T: proto3.getEnumType(MirSource) },
    { no: 2, name: "to", kind: "message", T: MirTarget, repeated: true },
    { no: 3, name: "other_pot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirCert {
    return new MirCert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirCert {
    return new MirCert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirCert {
    return new MirCert().fromJsonString(jsonString, options);
  }

  static equals(a: MirCert | PlainMessage<MirCert> | undefined, b: MirCert | PlainMessage<MirCert> | undefined): boolean {
    return proto3.util.equals(MirCert, a, b);
  }
}

